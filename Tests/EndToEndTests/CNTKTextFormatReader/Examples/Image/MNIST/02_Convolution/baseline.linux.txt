=== Running /home/alrezni/src/cntk_git/build/release/bin/cntk configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/Config/02_Convolution.cntk currentDirectory=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData RunDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu DataDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config OutputDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 15:08:09
		Last modified date: Tue Apr  5 16:01:37 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: alrezni/examples_text
		Build SHA1: e80dab7d66009531806ce70b4842146e0da00516
		Built by alrezni on atleneu04
		Build Path: /home/alrezni/src/cntk_git
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
05/03/2016 15:23:41: -------------------------------------------------------------------
05/03/2016 15:23:41: Build info: 

05/03/2016 15:23:41: 		Built time: May  3 2016 15:08:09
05/03/2016 15:23:41: 		Last modified date: Tue Apr  5 16:01:37 2016
05/03/2016 15:23:41: 		Build type: release
05/03/2016 15:23:41: 		Build target: GPU
05/03/2016 15:23:41: 		With 1bit-SGD: yes
05/03/2016 15:23:41: 		Math lib: acml
05/03/2016 15:23:41: 		CUDA_PATH: /usr/local/cuda-7.0
05/03/2016 15:23:41: 		CUB_PATH: /usr/local/cub-1.4.1
05/03/2016 15:23:41: 		CUDNN_PATH: /usr/local/cudnn-4.0
05/03/2016 15:23:41: 		Build Branch: alrezni/examples_text
05/03/2016 15:23:41: 		Build SHA1: e80dab7d66009531806ce70b4842146e0da00516
05/03/2016 15:23:41: 		Built by alrezni on atleneu04
05/03/2016 15:23:41: 		Build Path: /home/alrezni/src/cntk_git
05/03/2016 15:23:41: -------------------------------------------------------------------

05/03/2016 15:23:41: Running on localhost at 2016/05/03 15:23:41
05/03/2016 15:23:41: Command line: 
/home/alrezni/src/cntk_git/build/release/bin/cntk  configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/Config/02_Convolution.cntk  currentDirectory=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData  RunDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu  DataDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData  ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config  OutputDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



05/03/2016 15:23:41: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 15:23:41: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "$ModelDir$/02_Convolution"
ndlMacros = "$ConfigDir$/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
prefetch=true
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = test
    minibatchSize = 16
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
RunDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu
DataDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

05/03/2016 15:23:41: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 15:23:41: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 15:23:41: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution"
ndlMacros = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
prefetch=true
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = test
    minibatchSize = 16
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config/02_Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
RunDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu
DataDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

05/03/2016 15:23:41: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 15:23:41: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_Convolution.cntk:command=train:test
configparameters: 02_Convolution.cntk:ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config
configparameters: 02_Convolution.cntk:currentDirectory=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
configparameters: 02_Convolution.cntk:DataDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData
configparameters: 02_Convolution.cntk:deviceId=0
configparameters: 02_Convolution.cntk:imageLayout=cudnn
configparameters: 02_Convolution.cntk:initOnCPUOnly=true
configparameters: 02_Convolution.cntk:ModelDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/Models
configparameters: 02_Convolution.cntk:modelPath=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution
configparameters: 02_Convolution.cntk:ndlMacros=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config/Macros.ndl
configparameters: 02_Convolution.cntk:numMBsToShowResult=500
configparameters: 02_Convolution.cntk:OutputDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu
configparameters: 02_Convolution.cntk:precision=float
configparameters: 02_Convolution.cntk:prefetch=true
configparameters: 02_Convolution.cntk:RootDir=..
configparameters: 02_Convolution.cntk:RunDir=/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu
configparameters: 02_Convolution.cntk:test=[
    action = test
    minibatchSize = 16
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config/02_Convolution.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 02_Convolution.cntk:timestamping=true
configparameters: 02_Convolution.cntk:traceLevel=1
configparameters: 02_Convolution.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/02_Convolution/../../../../../../../Examples/Image/MNIST/Config/02_Convolution.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.1*5:0.3
        momentumPerMB = 0*10:0.7
        maxEpochs = 15
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

05/03/2016 15:23:41: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 15:23:41: Commands: train test
05/03/2016 15:23:41: Precision = "float"
05/03/2016 15:23:41: CNTKModelPath: /tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution
05/03/2016 15:23:41: CNTKCommandTrainInfo: train : 3
05/03/2016 15:23:41: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

05/03/2016 15:23:41: ##############################################################################
05/03/2016 15:23:41: #                                                                            #
05/03/2016 15:23:41: # Action "train"                                                             #
05/03/2016 15:23:41: #                                                                            #
05/03/2016 15:23:41: ##############################################################################

05/03/2016 15:23:41: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

05/03/2016 15:23:41: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.w.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.w.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c = Convolution (conv1.w.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.b.b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1.cpb = Plus (conv1.c.c, conv1.b.b) : [28 x 28 x 16 x *], [1 x 1 x 16] -> [28 x 28 x 16 x *]
Validating --> conv1.out = RectifiedLinear (conv1.cpb) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.out) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c = Convolution (conv2.w.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.b.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2.cpb = Plus (conv2.c.c, conv2.b.b) : [14 x 14 x 32 x *], [1 x 1 x 32] -> [14 x 14 x 32 x *]
Validating --> conv2.out = RectifiedLinear (conv2.cpb) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2.p = Pooling (conv2.out) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> h1.t = Times (h1.W, pool2.p) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *], [128 x 1] -> [128 x 1 x *]
Validating --> h1.y = Sigmoid (h1.z) : [128 x 1 x *] -> [128 x 1 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x 1 x *] -> [10 x 1 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x 1 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 15:23:42: Created model with 27 nodes on GPU 0.

05/03/2016 15:23:42: Training criterion node(s):
05/03/2016 15:23:42: 	ce = CrossEntropyWithSoftmax

05/03/2016 15:23:42: Evaluation criterion node(s):

05/03/2016 15:23:42: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [labels Gradient[10 x *]] }
0x199a368: {[features Value[28 x 28 x 1 x *]] }
0x2670ba8: {[conv1.b.b Value[1 x 1 x 16]] }
0x2672778: {[conv2.w.W Value[32 x 400]] }
0x2673618: {[conv2.b.b Value[1 x 1 x 32]] }
0x2677ae8: {[h1.W Value[128 x 7 x 7 x 32]] }
0x2678948: {[h1.b Value[128 x 1]] }
0x2679ce8: {[ol.W Value[10 x 128]] }
0x267abe8: {[ol.b Value[10 x 1]] }
0x268ee08: {[featScale Value[1 x 1]] }
0x26900d8: {[labels Value[10 x *]] }
0x2690be8: {[conv1.w.W Value[16 x 25]] }
0x2b8fbb8: {[err Value[1]] }
0x2b8fde8: {[ce Value[1]] }
0x2b90498: {[ol.z Value[10 x 1 x *]] }
0xbf20ec8: {[featScaled Value[28 x 28 x 1 x *]] }
0xbf21608: {[conv1.c.c Value[28 x 28 x 16 x *]] }
0xbf21928: {[conv1.cpb Value[28 x 28 x 16 x *]] [conv1.w.W Gradient[16 x 25]] }
0xbf21ae8: {[conv1.c.c Gradient[28 x 28 x 16 x *]] [conv1.out Value[28 x 28 x 16 x *]] }
0xbf21ca8: {[conv1.cpb Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
0xbf21e68: {[conv2.c.c Value[14 x 14 x 32 x *]] }
0xbf22028: {[conv1.b.b Gradient[1 x 1 x 16]] [conv1.out Gradient[28 x 28 x 16 x *]] }
0xbf221e8: {[conv2.cpb Value[14 x 14 x 32 x *]] [conv2.w.W Gradient[32 x 400]] }
0xbf223a8: {[conv2.c.c Gradient[14 x 14 x 32 x *]] [conv2.out Value[14 x 14 x 32 x *]] }
0xbf22568: {[conv2.cpb Gradient[14 x 14 x 32 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2.p Value[7 x 7 x 32 x *]] }
0xbf22728: {[conv2.b.b Gradient[1 x 1 x 32]] [conv2.out Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
0xbf228e8: {[h1.W Gradient[128 x 7 x 7 x 32]] [h1.z Value[128 x 1 x *]] }
0xbf22aa8: {[h1.t Gradient[128 x *]] [h1.y Value[128 x 1 x *]] }
0xbf22c68: {[h1.z Gradient[128 x 1 x *]] [ol.t Value[10 x 1 x *]] [pool2.p Gradient[7 x 7 x 32 x *]] }
0xbf23718: {[ce Gradient[1]] }
0xbf238d8: {[ol.W Gradient[10 x 128]] [ol.z Gradient[10 x 1 x *]] }
0xbf23a98: {[ol.t Gradient[10 x 1 x *]] }
0xbf48e28: {[ol.b Gradient[10 x 1]] }
0xbf48fe8: {[h1.b Gradient[128 x 1]] [h1.y Gradient[128 x 1 x *]] }

05/03/2016 15:23:42: No PreCompute nodes found, skipping PreCompute step.

05/03/2016 15:23:42: Starting Epoch 1: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples

05/03/2016 15:23:42: Starting minibatch loop.
05/03/2016 15:23:44:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 1.03994666 * 16000; err = 0.34537500 * 16000; time = 2.0123s; samplesPerSecond = 7951.0
05/03/2016 15:23:45:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.15877246 * 16000; err = 0.04375000 * 16000; time = 1.1168s; samplesPerSecond = 14326.4
05/03/2016 15:23:46:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.10839343 * 16000; err = 0.03156250 * 16000; time = 1.1169s; samplesPerSecond = 14325.0
05/03/2016 15:23:47: Finished Epoch[ 1 of 3]: [Training] ce = 0.36700762 * 60000; err = 0.11800000 * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.003125; epochTime=5.09894s
05/03/2016 15:23:47: SGD: Saving checkpoint model '/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.1'

05/03/2016 15:23:47: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples

05/03/2016 15:23:47: Starting minibatch loop.
05/03/2016 15:23:48:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.07292833 * 16000; err = 0.02168750 * 16000; time = 1.1159s; samplesPerSecond = 14338.3
05/03/2016 15:23:49:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.06331520 * 16000; err = 0.01800000 * 16000; time = 1.1143s; samplesPerSecond = 14359.1
05/03/2016 15:23:51:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06492456 * 16000; err = 0.02018750 * 16000; time = 1.1149s; samplesPerSecond = 14351.6
05/03/2016 15:23:51: Finished Epoch[ 2 of 3]: [Training] ce = 0.06665590 * 60000; err = 0.01981667 * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=4.19026s
05/03/2016 15:23:51: SGD: Saving checkpoint model '/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution.2'

05/03/2016 15:23:51: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.000000  momentum as time constant = 0.0 samples

05/03/2016 15:23:51: Starting minibatch loop.
05/03/2016 15:23:53:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.04303751 * 16000; err = 0.01262500 * 16000; time = 1.1160s; samplesPerSecond = 14337.2
05/03/2016 15:23:54:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.04642399 * 16000; err = 0.01393750 * 16000; time = 1.1162s; samplesPerSecond = 14334.6
05/03/2016 15:23:55:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.05094755 * 16000; err = 0.01531250 * 16000; time = 1.1153s; samplesPerSecond = 14345.9
05/03/2016 15:23:56: Finished Epoch[ 3 of 3]: [Training] ce = 0.04582330 * 60000; err = 0.01376667 * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=4.19174s
05/03/2016 15:23:56: SGD: Saving checkpoint model '/tmp/cntk-test-20160503152341.636520/CNTKTextFormatReader/Examples/Image/MNIST_02_Convolution@release_gpu/Models/02_Convolution'
05/03/2016 15:23:56: CNTKCommandTrainEnd: train

05/03/2016 15:23:56: Action "train" complete.


05/03/2016 15:23:56: ##############################################################################
05/03/2016 15:23:56: #                                                                            #
05/03/2016 15:23:56: # Action "test"                                                              #
05/03/2016 15:23:56: #                                                                            #
05/03/2016 15:23:56: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 27 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.w.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.w.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c = Convolution (conv1.w.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.b.b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> conv1.cpb = Plus (conv1.c.c, conv1.b.b) : [28 x 28 x 16 x *1], [1 x 1 x 16] -> [28 x 28 x 16 x *1]
Validating --> conv1.out = RectifiedLinear (conv1.cpb) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.out) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c = Convolution (conv2.w.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.b.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv2.cpb = Plus (conv2.c.c, conv2.b.b) : [14 x 14 x 32 x *1], [1 x 1 x 32] -> [14 x 14 x 32 x *1]
Validating --> conv2.out = RectifiedLinear (conv2.cpb) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2.p = Pooling (conv2.out) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2.p) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.z = Plus (h1.t, h1.b) : [128 x *1], [128 x 1] -> [128 x 1 x *1]
Validating --> h1.y = Sigmoid (h1.z) : [128 x 1 x *1] -> [128 x 1 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x 1 x *1] -> [10 x 1 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x 1 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 32, Stride: 1 x 1 x 16, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (1, 1, 0), LowerPad: 0, UpperPad: 0.


11 out of 27 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[ce Gradient[1]] [conv1.b.b Gradient[1 x 1 x 16]] [conv1.c.c Gradient[28 x 28 x 16 x *1]] [conv1.cpb Gradient[28 x 28 x 16 x *1]] [conv1.out Gradient[28 x 28 x 16 x *1]] [conv1.w.W Gradient[16 x 25]] [conv2.b.b Gradient[1 x 1 x 32]] [conv2.c.c Gradient[14 x 14 x 32 x *1]] [conv2.cpb Gradient[14 x 14 x 32 x *1]] [conv2.out Gradient[14 x 14 x 32 x *1]] [conv2.w.W Gradient[32 x 400]] [err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x 1 x *1]] [h1.z Gradient[128 x 1 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x 1 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2.p Gradient[7 x 7 x 32 x *1]] }
0x1997888: {[conv1.w.W Value[16 x 25]] }
0x1998498: {[conv2.b.b Value[1 x 1 x 32]] }
0x199fd98: {[conv1.b.b Value[1 x 1 x 16]] }
0x19d3208: {[conv2.c.c Value[14 x 14 x 32 x *1]] }
0x19d3588: {[conv2.cpb Value[14 x 14 x 32 x *1]] }
0x19d3748: {[conv2.out Value[14 x 14 x 32 x *1]] }
0x19d3908: {[pool2.p Value[7 x 7 x 32 x *1]] }
0x19d5808: {[h1.W Value[128 x 7 x 7 x 32]] }
0x19d8068: {[ol.b Value[10 x 1]] }
0x19da828: {[conv2.w.W Value[32 x 400]] }
0x2670498: {[ol.W Value[10 x 128]] }
0x267a0c8: {[h1.t Value[128 x *1]] }
0x267a288: {[h1.z Value[128 x 1 x *1]] }
0x267a448: {[h1.y Value[128 x 1 x *1]] }
0x267a608: {[ol.t Value[10 x 1 x *1]] }
0x267a7c8: {[ol.z Value[10 x 1 x *1]] }
0x267e3f8: {[conv1.cpb Value[28 x 28 x 16 x *1]] }
0x267e5b8: {[conv1.out Value[28 x 28 x 16 x *1]] }
0x267e778: {[pool1 Value[14 x 14 x 16 x *1]] }
0x2680ef8: {[featScaled Value[28 x 28 x 1 x *1]] }
0x2681218: {[conv1.c.c Value[28 x 28 x 16 x *1]] }
0x2b8fbb8: {[featScale Value[1 x 1]] }
0xbf3d0d8: {[labels Value[10 x *1]] }
0xbf4c8c8: {[h1.b Value[128 x 1]] }
0xbf50dc8: {[err Value[1]] }
0xbf50e68: {[ce Value[1]] }
0xc003fe8: {[features Value[28 x 28 x 1 x *1]] }

05/03/2016 15:23:59: Final Results: Minibatch[1-625]: err = 0.01440000 * 10000; ce = 0.04599458 * 10000; perplexity = 1.04706874

05/03/2016 15:23:59: Action "test" complete.

05/03/2016 15:23:59: __COMPLETED__