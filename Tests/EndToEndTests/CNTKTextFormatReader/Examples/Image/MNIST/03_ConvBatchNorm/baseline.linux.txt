=== Running /home/alrezni/src/cntk_git/build/release/bin/cntk configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk currentDirectory=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData RunDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu DataDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config OutputDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 15:08:09
		Last modified date: Tue Apr  5 16:01:37 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: alrezni/examples_text
		Build SHA1: e80dab7d66009531806ce70b4842146e0da00516
		Built by alrezni on atleneu04
		Build Path: /home/alrezni/src/cntk_git
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
05/03/2016 15:24:13: -------------------------------------------------------------------
05/03/2016 15:24:13: Build info: 

05/03/2016 15:24:13: 		Built time: May  3 2016 15:08:09
05/03/2016 15:24:13: 		Last modified date: Tue Apr  5 16:01:37 2016
05/03/2016 15:24:13: 		Build type: release
05/03/2016 15:24:13: 		Build target: GPU
05/03/2016 15:24:13: 		With 1bit-SGD: yes
05/03/2016 15:24:13: 		Math lib: acml
05/03/2016 15:24:13: 		CUDA_PATH: /usr/local/cuda-7.0
05/03/2016 15:24:13: 		CUB_PATH: /usr/local/cub-1.4.1
05/03/2016 15:24:13: 		CUDNN_PATH: /usr/local/cudnn-4.0
05/03/2016 15:24:13: 		Build Branch: alrezni/examples_text
05/03/2016 15:24:13: 		Build SHA1: e80dab7d66009531806ce70b4842146e0da00516
05/03/2016 15:24:13: 		Built by alrezni on atleneu04
05/03/2016 15:24:13: 		Build Path: /home/alrezni/src/cntk_git
05/03/2016 15:24:13: -------------------------------------------------------------------

05/03/2016 15:24:13: Running on localhost at 2016/05/03 15:24:13
05/03/2016 15:24:13: Command line: 
/home/alrezni/src/cntk_git/build/release/bin/cntk  configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk  currentDirectory=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData  RunDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu  DataDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData  ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config  OutputDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



05/03/2016 15:24:13: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 15:24:13: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "$ModelDir$/03_ConvBatchNorm"
ndlMacros = "$ConfigDir$/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 32
    modelPath=$ModelDir$/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
RunDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DataDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

05/03/2016 15:24:13: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 15:24:13: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 15:24:13: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm"
ndlMacros = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 32
    modelPath=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
RunDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DataDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config
OutputDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

05/03/2016 15:24:13: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 15:24:13: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ConvBatchNorm.cntk:command=train:test
configparameters: 03_ConvBatchNorm.cntk:ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config
configparameters: 03_ConvBatchNorm.cntk:currentDirectory=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
configparameters: 03_ConvBatchNorm.cntk:DataDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData
configparameters: 03_ConvBatchNorm.cntk:deviceId=0
configparameters: 03_ConvBatchNorm.cntk:imageLayout=cudnn
configparameters: 03_ConvBatchNorm.cntk:initOnCPUOnly=true
configparameters: 03_ConvBatchNorm.cntk:ModelDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models
configparameters: 03_ConvBatchNorm.cntk:modelPath=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm.cntk:ndlMacros=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config/Macros.ndl
configparameters: 03_ConvBatchNorm.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm.cntk:OutputDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:precision=float
configparameters: 03_ConvBatchNorm.cntk:RootDir=..
configparameters: 03_ConvBatchNorm.cntk:RunDir=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:test=[
    action = "test"
    minibatchSize = 32
    modelPath=/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 03_ConvBatchNorm.cntk:timestamping=true
configparameters: 03_ConvBatchNorm.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/03_ConvBatchNorm/../../../../../../../Examples/Image/MNIST/Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

05/03/2016 15:24:13: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 15:24:13: Commands: train test
05/03/2016 15:24:13: Precision = "float"
05/03/2016 15:24:13: CNTKModelPath: /tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
05/03/2016 15:24:13: CNTKCommandTrainInfo: train : 3
05/03/2016 15:24:13: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

05/03/2016 15:24:13: ##############################################################################
05/03/2016 15:24:13: #                                                                            #
05/03/2016 15:24:13: # Action "train"                                                             #
05/03/2016 15:24:13: #                                                                            #
05/03/2016 15:24:13: ##############################################################################

05/03/2016 15:24:13: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

05/03/2016 15:24:13: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 1568]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]

h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 15:24:13: Created model with 36 nodes on GPU 0.

05/03/2016 15:24:13: Training criterion node(s):
05/03/2016 15:24:13: 	ce = CrossEntropyWithSoftmax

05/03/2016 15:24:13: Evaluation criterion node(s):

05/03/2016 15:24:13: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [labels Gradient[10 x *]] }
0x2e3d2b8: {[features Value[28 x 28 x 1 x *]] }
0x3ac1fe8: {[featScale Value[1 x 1]] }
0x3af53a8: {[labels Value[10 x *]] }
0x3fe8ef8: {[conv1.c.W Value[16 x 25]] }
0x3fe98d8: {[conv1.c.c.b Value[16 x 1]] }
0x3fea2c8: {[conv1.c.c.sc Value[16 x 1]] }
0x3feae08: {[conv1.c.c.m Value[16 x 1]] }
0x3feb978: {[conv1.c.c.isd Value[16 x 1]] }
0x3fed6b8: {[conv2.c.W Value[32 x 400]] }
0x3fee5d8: {[conv2.c.c.b Value[32 x 1]] }
0x3fef088: {[conv2.c.c.sc Value[32 x 1]] }
0x3fefbe8: {[conv2.c.c.m Value[32 x 1]] }
0x3ff06f8: {[conv2.c.c.isd Value[32 x 1]] }
0x3ff23d8: {[h1.W Value[128 x 7 x 7 x 32]] }
0x3ff3278: {[h1.b Value[128 x 1]] }
0x3ff3bb8: {[h1.sc Value[128 x 1]] }
0x3ff4518: {[h1.m Value[128 x 1]] }
0x3ff5098: {[h1.isd Value[128 x 1]] }
0x3ff6388: {[ol.W Value[10 x 128]] }
0x3ff7188: {[ol.b Value[10 x 1]] }
0x402f7d8: {[ol.z Value[10 x 1 x *]] }
0x403d798: {[err Value[1]] }
0xc310e28: {[conv1.c.c.c Value[28 x 28 x 16 x *]] }
0xc310ef8: {[featScaled Value[28 x 28 x 1 x *]] }
0xc3111e8: {[conv1.c.c.y Value[28 x 28 x 16 x *]] }
0xc312068: {[conv1.c.c.y Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
0xc312228: {[conv1.c.W Gradient[16 x 25]] [conv2.c.c.c Value[14 x 14 x 32 x *]] }
0xc3123e8: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[28 x 28 x 16 x *]] }
0xc3125a8: {[conv2.c.c.y Value[14 x 14 x 32 x *]] }
0xc312ae8: {[conv1.c.c.b Gradient[16 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *]] [conv2.y Value[14 x 14 x 32 x *]] }
0xc312ca8: {[conv2.c.c.y Gradient[14 x 14 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
0xc312e68: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
0xc313028: {[h1.bn Value[128 x *]] }
0xc3133a8: {[conv2.c.c.b Gradient[32 x 1]] }
0xc313568: {[conv2.c.W Gradient[32 x 400]] [h1.t Gradient[128 x *]] [h1.y Value[128 x *]] }
0xc313728: {[h1.bn Gradient[128 x *]] [ol.t Value[10 x *]] }
0xc331f68: {[ce Value[1]] }
0xc3324c8: {[conv1.c.c.c Gradient[28 x 28 x 16 x *]] [conv1.y Value[28 x 28 x 16 x *]] }
0xc3393b8: {[ce Gradient[1]] }
0xc339578: {[ol.W Gradient[10 x 128]] [ol.z Gradient[10 x 1 x *]] }
0xc339738: {[ol.t Gradient[10 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2 Gradient[7 x 7 x 32 x *]] }
0xc3398f8: {[ol.b Gradient[10 x 1]] }
0xc339ab8: {[h1.sc Gradient[128 x 1]] [h1.y Gradient[128 x *]] }
0xc339ca8: {[h1.W Gradient[128 x 7 x 7 x 32]] }
0xc339e68: {[h1.b Gradient[128 x 1]] }

05/03/2016 15:24:13: No PreCompute nodes found, skipping PreCompute step.

05/03/2016 15:24:13: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples

05/03/2016 15:24:13: Starting minibatch loop.
05/03/2016 15:24:15:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.18395755 * 16000; err = 0.05768750 * 16000; time = 2.0832s; samplesPerSecond = 7680.3
05/03/2016 15:24:17:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.08204968 * 16000; err = 0.02581250 * 16000; time = 1.1954s; samplesPerSecond = 13384.3
05/03/2016 15:24:18:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06832715 * 16000; err = 0.02100000 * 16000; time = 1.1960s; samplesPerSecond = 13377.5
05/03/2016 15:24:19: Finished Epoch[ 1 of 3]: [Training] ce = 0.10018582 * 60000; err = 0.03155000 * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.015625; epochTime=5.38882s
05/03/2016 15:24:19: SGD: Saving checkpoint model '/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to inf.

05/03/2016 15:24:19: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples

05/03/2016 15:24:19: Starting minibatch loop.
05/03/2016 15:24:20:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.02210617 * 16000; err = 0.00718750 * 16000; time = 1.1949s; samplesPerSecond = 13390.1
05/03/2016 15:24:21:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01716298 * 16000; err = 0.00525000 * 16000; time = 1.1958s; samplesPerSecond = 13380.7
05/03/2016 15:24:22:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.02031721 * 16000; err = 0.00643750 * 16000; time = 1.1957s; samplesPerSecond = 13380.9
05/03/2016 15:24:23: Finished Epoch[ 2 of 3]: [Training] ce = 0.02006514 * 60000; err = 0.00623333 * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=4.49094s
05/03/2016 15:24:23: SGD: Saving checkpoint model '/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.2'

05/03/2016 15:24:23: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples

05/03/2016 15:24:23: Starting minibatch loop.
05/03/2016 15:24:24:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.01168879 * 16000; err = 0.00300000 * 16000; time = 1.1966s; samplesPerSecond = 13371.2
05/03/2016 15:24:26:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01459313 * 16000; err = 0.00412500 * 16000; time = 1.1962s; samplesPerSecond = 13375.8
05/03/2016 15:24:27:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01584558 * 16000; err = 0.00481250 * 16000; time = 1.1955s; samplesPerSecond = 13383.6
05/03/2016 15:24:28: Finished Epoch[ 3 of 3]: [Training] ce = 0.01387531 * 60000; err = 0.00390000 * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=4.49265s
05/03/2016 15:24:28: SGD: Saving checkpoint model '/tmp/cntk-test-20160503152413.97848/CNTKTextFormatReader/Examples/Image/MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm'
05/03/2016 15:24:28: CNTKCommandTrainEnd: train

05/03/2016 15:24:28: Action "train" complete.


05/03/2016 15:24:28: ##############################################################################
05/03/2016 15:24:28: #                                                                            #
05/03/2016 15:24:28: # Action "test"                                                              #
05/03/2016 15:24:28: #                                                                            #
05/03/2016 15:24:28: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *1], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[ce Gradient[1]] [conv1.c.W Gradient[16 x 25]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[28 x 28 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[28 x 28 x 16 x *1]] [conv1.y Gradient[28 x 28 x 16 x *1]] [conv2.c.W Gradient[32 x 400]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[14 x 14 x 32 x *1]] [conv2.y Gradient[14 x 14 x 32 x *1]] [err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.bn Gradient[128 x *1]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [h1.sc Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] }
0x2e3d1b8: {[h1.sc Value[128 x 1]] }
0x2e3df18: {[conv1.c.c.sc Value[16 x 1]] }
0x2e3e038: {[conv2.c.c.m Value[32 x 1]] }
0x2e41e98: {[features Value[28 x 28 x 1 x *1]] }
0x2e42ec8: {[conv1.c.c.b Value[16 x 1]] }
0x2e543f8: {[conv2.c.c.b Value[32 x 1]] }
0x2e55908: {[conv2.c.c.isd Value[32 x 1]] }
0x2e71968: {[h1.m Value[128 x 1]] }
0x2e726e8: {[featScale Value[1 x 1]] }
0x2e72dc8: {[conv2.c.c.y Value[14 x 14 x 32 x *1]] }
0x2e73308: {[conv2.y Value[14 x 14 x 32 x *1]] }
0x2e734c8: {[pool2 Value[7 x 7 x 32 x *1]] }
0x2e73688: {[h1.t Value[128 x *1]] }
0x2e814c8: {[conv2.c.c.sc Value[32 x 1]] }
0x2e82488: {[conv1.c.W Value[16 x 25]] }
0x2e83858: {[h1.W Value[128 x 7 x 7 x 32]] }
0x3ac1e58: {[pool1 Value[14 x 14 x 16 x *1]] }
0x3ac2018: {[conv2.c.c.c Value[14 x 14 x 32 x *1]] }
0x3fe8508: {[conv2.c.W Value[32 x 400]] }
0x3fe8a48: {[h1.isd Value[128 x 1]] }
0x3fe93a8: {[h1.b Value[128 x 1]] }
0x3fec9c8: {[conv1.c.c.y Value[28 x 28 x 16 x *1]] }
0x3fed258: {[conv1.y Value[28 x 28 x 16 x *1]] }
0x3ff0168: {[err Value[1]] }
0x3ff02c8: {[ce Value[1]] }
0x3ff75d8: {[conv1.c.c.m Value[16 x 1]] }
0x3ff7b68: {[ol.b Value[10 x 1]] }
0x3ff99d8: {[conv1.c.c.c Value[28 x 28 x 16 x *1]] }
0x3ff9aa8: {[featScaled Value[28 x 28 x 1 x *1]] }
0x3ffc338: {[h1.bn Value[128 x *1]] }
0x3ffc878: {[h1.y Value[128 x *1]] }
0x3ffca38: {[ol.t Value[10 x *1]] }
0x3ffcbf8: {[ol.z Value[10 x 1 x *1]] }
0xc32cb58: {[conv1.c.c.isd Value[16 x 1]] }
0xc33a828: {[ol.W Value[10 x 128]] }
0xc33acf8: {[labels Value[10 x *1]] }

05/03/2016 15:24:32: Final Results: Minibatch[1-313]: err = 0.00730000 * 10000; ce = 0.02181940 * 10000; perplexity = 1.02205918

05/03/2016 15:24:32: Action "test" complete.

05/03/2016 15:24:32: __COMPLETED__