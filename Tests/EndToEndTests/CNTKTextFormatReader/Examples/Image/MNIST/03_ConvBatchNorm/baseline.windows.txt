=== Running /cygdrive/c/src/cntk_github/x64/release/cntk.exe configFile=C:\src\cntk_github\Examples\Image\MNIST\Config/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk currentDirectory=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData RunDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu DataDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData ConfigDir=C:\src\cntk_github\Examples\Image\MNIST\Config OutputDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu DeviceId=0 timestamping=true train=[SGD=[maxEpochs=3]] imageLayout="cudnn"
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 12:19:59
		Last modified date: Thu Apr  7 11:05:47 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: E:\lib\cub-1.4.1
		CUDNN_PATH: E:\lib\cuDNN_v4
		Build Branch: alrezni/examples_text
		Build SHA1: d5e576046e2fa850c4296da155f15c2b08b7927a
		Built by alrezni on DIFFENG
		Build Path: C:\src\cntk_github\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
05/03/2016 14:50:27: -------------------------------------------------------------------
05/03/2016 14:50:27: Build info: 

05/03/2016 14:50:27: 		Built time: May  3 2016 12:19:59
05/03/2016 14:50:27: 		Last modified date: Thu Apr  7 11:05:47 2016
05/03/2016 14:50:27: 		Build type: Release
05/03/2016 14:50:27: 		Build target: GPU
05/03/2016 14:50:27: 		With 1bit-SGD: no
05/03/2016 14:50:27: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
05/03/2016 14:50:27: 		CUB_PATH: E:\lib\cub-1.4.1
05/03/2016 14:50:27: 		CUDNN_PATH: E:\lib\cuDNN_v4
05/03/2016 14:50:27: 		Build Branch: alrezni/examples_text
05/03/2016 14:50:27: 		Build SHA1: d5e576046e2fa850c4296da155f15c2b08b7927a
05/03/2016 14:50:27: 		Built by alrezni on DIFFENG
05/03/2016 14:50:27: 		Build Path: C:\src\cntk_github\Source\CNTK\
05/03/2016 14:50:27: -------------------------------------------------------------------

05/03/2016 14:50:27: Running on DIFFENG at 2016/05/03 14:50:27
05/03/2016 14:50:27: Command line: 
C:\src\cntk_github\x64\release\cntk.exe  configFile=C:\src\cntk_github\Examples\Image\MNIST\Config/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/MNIST/Config/03_ConvBatchNorm.cntk  currentDirectory=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData  RunDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu  DataDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData  ConfigDir=C:\src\cntk_github\Examples\Image\MNIST\Config  OutputDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu  DeviceId=0  timestamping=true  train=[SGD=[maxEpochs=3]]  imageLayout="cudnn"



05/03/2016 14:50:27: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 14:50:27: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "$ModelDir$/03_ConvBatchNorm"
ndlMacros = "$ConfigDir$/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 32
    modelPath=$ModelDir$/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
RunDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DataDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
ConfigDir=C:\src\cntk_github\Examples\Image\MNIST\Config
OutputDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

05/03/2016 14:50:27: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 14:50:27: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 14:50:27: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models"
deviceId = 0
imageLayout = "cudnn"
command = train:test
precision = "float"
modelPath = "E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm"
ndlMacros = "C:\src\cntk_github\Examples\Image\MNIST\Config/Macros.ndl"
traceLevel=1
numMBsToShowResult=500
initOnCPUOnly=true
train = [
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
test = [
    action = "test"
    minibatchSize = 32
    modelPath=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
RunDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DataDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
ConfigDir=C:\src\cntk_github\Examples\Image\MNIST\Config
OutputDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
DeviceId=0
timestamping=true
train=[SGD=[maxEpochs=3]]
imageLayout="cudnn"

05/03/2016 14:50:27: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 14:50:27: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 03_ConvBatchNorm.cntk:command=train:test
configparameters: 03_ConvBatchNorm.cntk:ConfigDir=C:\src\cntk_github\Examples\Image\MNIST\Config
configparameters: 03_ConvBatchNorm.cntk:currentDirectory=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
configparameters: 03_ConvBatchNorm.cntk:DataDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData
configparameters: 03_ConvBatchNorm.cntk:deviceId=0
configparameters: 03_ConvBatchNorm.cntk:imageLayout=cudnn
configparameters: 03_ConvBatchNorm.cntk:initOnCPUOnly=true
configparameters: 03_ConvBatchNorm.cntk:ModelDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models
configparameters: 03_ConvBatchNorm.cntk:modelPath=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
configparameters: 03_ConvBatchNorm.cntk:ndlMacros=C:\src\cntk_github\Examples\Image\MNIST\Config/Macros.ndl
configparameters: 03_ConvBatchNorm.cntk:numMBsToShowResult=500
configparameters: 03_ConvBatchNorm.cntk:OutputDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:precision=float
configparameters: 03_ConvBatchNorm.cntk:RootDir=..
configparameters: 03_ConvBatchNorm.cntk:RunDir=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu
configparameters: 03_ConvBatchNorm.cntk:test=[
    action = "test"
    minibatchSize = 32
    modelPath=E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Test-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 03_ConvBatchNorm.cntk:timestamping=true
configparameters: 03_ConvBatchNorm.cntk:traceLevel=1
configparameters: 03_ConvBatchNorm.cntk:train=[
    action = "train"
    NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Examples\Image\MNIST\Config/03_ConvBatchNorm.ndl"
    ]
    SGD = [
        epochSize = 60000
        minibatchSize = 32
        learningRatesPerMB = 0.5:0.1
        momentumPerMB = 0.9
        maxEpochs = 2
        batchNormalizationBlendTimeConstant=0:1#INF
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu\TestData/Train-28x28_cntk_text.txt"
        input = [
            features = [
                dim = 784
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

05/03/2016 14:50:27: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 14:50:27: Commands: train test
05/03/2016 14:50:27: Precision = "float"
05/03/2016 14:50:27: CNTKModelPath: E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm
05/03/2016 14:50:27: CNTKCommandTrainInfo: train : 3
05/03/2016 14:50:27: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

05/03/2016 14:50:27: ##############################################################################
05/03/2016 14:50:27: #                                                                            #
05/03/2016 14:50:27: # Action "train"                                                             #
05/03/2016 14:50:27: #                                                                            #
05/03/2016 14:50:27: ##############################################################################

05/03/2016 14:50:27: CNTKCommandTrainBegin: train
NDLBuilder Using GPU 0

05/03/2016 14:50:27: Creating virgin network.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 1568]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *] -> [14 x 14 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *] -> [14 x 14 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *] -> [7 x 7 x 32 x *]

h1.t Times operation: For legacy compatibility, the sample layout of left input (h1.W LearnableParameter operation) was patched to [128 x 7 x 7 x 32] (from [128 x 1568])
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [128 x *]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *] -> [128 x *]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *] -> [10 x *]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *], [10 x 1] -> [10 x 1 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *], [10 x 1 x *] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 14:50:28: Created model with 36 nodes on GPU 0.

05/03/2016 14:50:28: Training criterion node(s):
05/03/2016 14:50:28: 	ce = CrossEntropyWithSoftmax

05/03/2016 14:50:28: Evaluation criterion node(s):

05/03/2016 14:50:28: 	err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *]] [features Gradient[28 x 28 x 1 x *]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [labels Gradient[10 x *]] }
0000004902408550: {[features Value[28 x 28 x 1 x *]] }
00000049024087D0: {[featScale Value[1 x 1]] }
0000004902408D70: {[conv1.c.c.sc Value[16 x 1]] }
0000004902409310: {[labels Value[10 x *]] }
00000049024093B0: {[conv1.c.c.b Value[16 x 1]] }
00000049024098B0: {[conv1.c.c.m Value[16 x 1]] }
00000049024099F0: {[conv1.c.c.isd Value[16 x 1]] }
0000004902409C70: {[conv1.c.W Value[16 x 25]] }
000000491751BB10: {[conv2.c.c.isd Value[32 x 1]] }
000000491751BE30: {[conv2.c.c.b Value[32 x 1]] }
000000491751BED0: {[conv2.c.c.sc Value[32 x 1]] }
000000491751C1F0: {[h1.isd Value[128 x 1]] }
000000491751C6F0: {[h1.b Value[128 x 1]] }
000000491751C790: {[conv2.c.W Value[32 x 400]] }
000000491751CA10: {[h1.m Value[128 x 1]] }
000000491751CAB0: {[conv2.c.c.m Value[32 x 1]] }
000000491751CB50: {[h1.sc Value[128 x 1]] }
000000491751CDD0: {[ol.b Value[10 x 1]] }
000000491751D4B0: {[h1.W Value[128 x 7 x 7 x 32]] }
000000491751D870: {[ol.W Value[10 x 128]] }
000000491D2EF300: {[h1.b Gradient[128 x 1]] }
000000491D2EF6C0: {[conv1.c.c.sc Gradient[16 x 1]] [conv1.y Gradient[28 x 28 x 16 x *]] }
000000491D2EF760: {[h1.bn Value[128 x *]] }
000000491D2F0020: {[h1.sc Gradient[128 x 1]] [h1.y Gradient[128 x *]] }
000000491D2F00C0: {[conv2.c.c.b Gradient[32 x 1]] }
000000491D2F0160: {[h1.bn Gradient[128 x *]] [ol.t Value[10 x *]] }
000000491D2F0340: {[h1.W Gradient[128 x 7 x 7 x 32]] }
000000491D2F07A0: {[ol.W Gradient[10 x 128]] [ol.z Gradient[10 x 1 x *]] }
000000491D2F0A20: {[ol.b Gradient[10 x 1]] }
000000491D2F0AC0: {[conv2.c.W Gradient[32 x 400]] [h1.t Gradient[128 x *]] [h1.y Value[128 x *]] }
000000491D2F0C00: {[ce Gradient[1]] }
000000491D2F0E80: {[conv2.c.c.y Value[14 x 14 x 32 x *]] }
000000491D2F0F20: {[ol.t Gradient[10 x *]] [pool1 Gradient[14 x 14 x 16 x *]] [pool2 Gradient[7 x 7 x 32 x *]] }
000000491D2F1420: {[conv1.c.c.b Gradient[16 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *]] [conv2.y Value[14 x 14 x 32 x *]] }
000000491D2F19C0: {[conv2.c.c.y Gradient[14 x 14 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
000000491D2F1A60: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[14 x 14 x 32 x *]] [h1.t Value[128 x *]] }
000000491D2F1BA0: {[conv1.c.c.y Value[28 x 28 x 16 x *]] }
000000491D2F21E0: {[ce Value[1]] }
000000491D2F2280: {[ol.z Value[10 x 1 x *]] }
000000491D2F2320: {[featScaled Value[28 x 28 x 1 x *]] }
000000491D2F2960: {[conv1.c.c.c Value[28 x 28 x 16 x *]] }
000000491D2F2BE0: {[conv1.c.c.c Gradient[28 x 28 x 16 x *]] [conv1.y Value[28 x 28 x 16 x *]] }
000000491D2F2C80: {[conv1.c.c.y Gradient[28 x 28 x 16 x *]] [pool1 Value[14 x 14 x 16 x *]] }
000000491D2F2DC0: {[conv1.c.W Gradient[16 x 25]] [conv2.c.c.c Value[14 x 14 x 32 x *]] }
000000491D2F2F00: {[err Value[1]] }

05/03/2016 14:50:28: No PreCompute nodes found, skipping PreCompute step.

05/03/2016 14:50:28: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 303.7 samples

05/03/2016 14:50:28: Starting minibatch loop.
05/03/2016 14:50:35:  Epoch[ 1 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.17285497 * 16000; err = 0.05312500 * 16000; time = 6.5867s; samplesPerSecond = 2429.1
05/03/2016 14:50:39:  Epoch[ 1 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.07775217 * 16000; err = 0.02312500 * 16000; time = 4.5027s; samplesPerSecond = 3553.4
05/03/2016 14:50:43:  Epoch[ 1 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.06257271 * 16000; err = 0.02112500 * 16000; time = 4.4732s; samplesPerSecond = 3576.9
05/03/2016 14:50:47: Finished Epoch[ 1 of 3]: [Training] ce = 0.09524473 * 60000; err = 0.02960000 * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.015625; epochTime=18.9463s
05/03/2016 14:50:47: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.1'
Setting batch normalization blend time constant to 1.#INF.

05/03/2016 14:50:47: Starting Epoch 2: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples

05/03/2016 14:50:47: Starting minibatch loop.
05/03/2016 14:50:51:  Epoch[ 2 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.02388296 * 16000; err = 0.00687500 * 16000; time = 4.4559s; samplesPerSecond = 3590.8
05/03/2016 14:50:56:  Epoch[ 2 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.02155216 * 16000; err = 0.00687500 * 16000; time = 4.4698s; samplesPerSecond = 3579.6
05/03/2016 14:51:00:  Epoch[ 2 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01849166 * 16000; err = 0.00562500 * 16000; time = 4.4645s; samplesPerSecond = 3583.8
05/03/2016 14:51:04: Finished Epoch[ 2 of 3]: [Training] ce = 0.02036597 * 60000; err = 0.00606667 * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.003125; epochTime=16.7499s
05/03/2016 14:51:04: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm.2'

05/03/2016 14:51:04: Starting Epoch 3: learning rate per sample = 0.003125  effective momentum = 0.900000  momentum as time constant = 303.7 samples

05/03/2016 14:51:04: Starting minibatch loop.
05/03/2016 14:51:08:  Epoch[ 3 of 3]-Minibatch[   1- 500, 26.67%]: ce = 0.01559537 * 16000; err = 0.00412500 * 16000; time = 4.4917s; samplesPerSecond = 3562.2
05/03/2016 14:51:13:  Epoch[ 3 of 3]-Minibatch[ 501-1000, 53.33%]: ce = 0.01331455 * 16000; err = 0.00400000 * 16000; time = 4.5627s; samplesPerSecond = 3506.7
05/03/2016 14:51:17:  Epoch[ 3 of 3]-Minibatch[1001-1500, 80.00%]: ce = 0.01365618 * 16000; err = 0.00387500 * 16000; time = 4.6249s; samplesPerSecond = 3459.5
05/03/2016 14:51:21: Finished Epoch[ 3 of 3]: [Training] ce = 0.01416974 * 60000; err = 0.00400000 * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.003125; epochTime=17.0294s
05/03/2016 14:51:21: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160503155025.456895\CNTKTextFormatReader\Examples\Image\MNIST_03_ConvBatchNorm@release_gpu/Models/03_ConvBatchNorm'
05/03/2016 14:51:21: CNTKCommandTrainEnd: train

05/03/2016 14:51:21: Action "train" complete.


05/03/2016 14:51:21: ##############################################################################
05/03/2016 14:51:21: #                                                                            #
05/03/2016 14:51:21: # Action "test"                                                              #
05/03/2016 14:51:21: #                                                                            #
05/03/2016 14:51:21: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	err = ErrorPrediction()
	ol.z = Plus()

Validating network. 36 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> ol.W = LearnableParameter() :  -> [10 x 128]
Validating --> h1.W = LearnableParameter() :  -> [128 x 7 x 7 x 32]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 400]
Validating --> conv1.c.W = LearnableParameter() :  -> [16 x 25]
Validating --> featScale = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> featScaled = ElementTimes (featScale, features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [16 x 25], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [16 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1] -> [28 x 28 x 16 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 400], [14 x 14 x 16 x *1] -> [14 x 14 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [14 x 14 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [14 x 14 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [14 x 14 x 32 x *1] -> [14 x 14 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [14 x 14 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> h1.t = Times (h1.W, pool2) : [128 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [128 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [128 x 1]
Validating --> h1.b = LearnableParameter() :  -> [128 x 1]
Validating --> h1.m = LearnableParameter() :  -> [128 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [128 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [128 x *1], [128 x 1], [128 x 1], [128 x 1], [128 x 1] -> [128 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [128 x *1] -> [128 x *1]
Validating --> ol.t = Times (ol.W, h1.y) : [10 x 128], [128 x *1] -> [10 x *1]
Validating --> ol.b = LearnableParameter() :  -> [10 x 1]
Validating --> ol.z = Plus (ol.t, ol.b) : [10 x *1], [10 x 1] -> [10 x 1 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]
Validating --> err = ErrorPrediction (labels, ol.z) : [10 x *1], [10 x 1 x *1] -> [1]

Validating network. 16 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 1 x 1 x 16, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 16, Output: 14 x 14 x 32, Kernel: 5 x 5 x 16, Map: 1 x 1 x 32, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 14 x 14 x 32, Output: 7 x 7 x 32, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


20 out of 36 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[ce Gradient[1]] [conv1.c.W Gradient[16 x 25]] [conv1.c.c.b Gradient[16 x 1]] [conv1.c.c.c Gradient[28 x 28 x 16 x *1]] [conv1.c.c.isd Gradient[16 x 1]] [conv1.c.c.m Gradient[16 x 1]] [conv1.c.c.sc Gradient[16 x 1]] [conv1.c.c.y Gradient[28 x 28 x 16 x *1]] [conv1.y Gradient[28 x 28 x 16 x *1]] [conv2.c.W Gradient[32 x 400]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[14 x 14 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[14 x 14 x 32 x *1]] [conv2.y Gradient[14 x 14 x 32 x *1]] [err Gradient[1]] [featScale Gradient[1 x 1]] [featScaled Gradient[28 x 28 x 1 x *1]] [features Gradient[28 x 28 x 1 x *1]] [h1.W Gradient[128 x 7 x 7 x 32]] [h1.b Gradient[128 x 1]] [h1.bn Gradient[128 x *1]] [h1.isd Gradient[128 x 1]] [h1.m Gradient[128 x 1]] [h1.sc Gradient[128 x 1]] [h1.t Gradient[128 x *1]] [h1.y Gradient[128 x *1]] [labels Gradient[10 x *1]] [ol.W Gradient[10 x 128]] [ol.b Gradient[10 x 1]] [ol.t Gradient[10 x *1]] [ol.z Gradient[10 x 1 x *1]] [pool1 Gradient[14 x 14 x 16 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] }
0000004934FA71C0: {[conv2.c.c.sc Value[32 x 1]] }
0000004934FA76C0: {[conv1.c.c.m Value[16 x 1]] }
0000004934FA7C60: {[h1.isd Value[128 x 1]] }
0000004934FA8200: {[conv1.c.W Value[16 x 25]] }
0000004934FA83E0: {[h1.W Value[128 x 7 x 7 x 32]] }
0000004934FA8520: {[featScale Value[1 x 1]] }
0000004934FA85C0: {[conv2.c.W Value[32 x 400]] }
0000004934FA8660: {[conv2.c.c.m Value[32 x 1]] }
0000004934FA87A0: {[conv1.c.c.isd Value[16 x 1]] }
0000004934FA88E0: {[conv1.c.c.sc Value[16 x 1]] }
0000004934FA8980: {[conv1.c.c.b Value[16 x 1]] }
0000004934FA8A20: {[conv2.c.c.isd Value[32 x 1]] }
0000004934FA8AC0: {[h1.sc Value[128 x 1]] }
0000004934FA8D40: {[h1.b Value[128 x 1]] }
0000004934FA8F20: {[labels Value[10 x *1]] }
0000004934FA9100: {[conv2.c.c.b Value[32 x 1]] }
0000004934FA92E0: {[features Value[28 x 28 x 1 x *1]] }
0000004934FA9420: {[h1.m Value[128 x 1]] }
0000004934FA9560: {[ol.b Value[10 x 1]] }
0000004934FA97E0: {[ol.W Value[10 x 128]] }
0000004934FA9880: {[conv1.c.c.y Value[28 x 28 x 16 x *1]] }
0000004934FA9B00: {[err Value[1]] }
0000004934FA9BA0: {[pool2 Value[7 x 7 x 32 x *1]] }
0000004934FA9C40: {[h1.y Value[128 x *1]] }
0000004934FA9D80: {[h1.t Value[128 x *1]] }
0000004934FA9E20: {[conv1.y Value[28 x 28 x 16 x *1]] }
0000004934FA9EC0: {[pool1 Value[14 x 14 x 16 x *1]] }
0000004934FA9F60: {[h1.bn Value[128 x *1]] }
0000004934FAA320: {[conv2.c.c.c Value[14 x 14 x 32 x *1]] }
0000004934FAA460: {[ce Value[1]] }
0000004934FAA640: {[conv2.c.c.y Value[14 x 14 x 32 x *1]] }
0000004934FAA780: {[conv1.c.c.c Value[28 x 28 x 16 x *1]] }
0000004934FAAA00: {[featScaled Value[28 x 28 x 1 x *1]] }
0000004934FAABE0: {[ol.t Value[10 x *1]] }
0000004934FAAD20: {[conv2.y Value[14 x 14 x 32 x *1]] }
0000004934FAAE60: {[ol.z Value[10 x 1 x *1]] }

05/03/2016 14:51:31: Final Results: Minibatch[1-313]: err = 0.00740000 * 10000; ce = 0.02101458 * 10000; perplexity = 1.02123694

05/03/2016 14:51:31: Action "test" complete.

05/03/2016 14:51:31: __COMPLETED__