=== Running /home/alrezni/src/cntk_git/build/release/bin/cntk configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/Config/02_BatchNormConv.cntk currentDirectory=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData RunDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu DataDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10 OutputDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Apr 26 2016 17:04:28
		Last modified date: Tue Apr  5 16:01:37 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: alrezni/examples_text
		Build SHA1: 780d0d14f555f568d393793562f374f04af79a73
		Built by alrezni on atleneu04
		Build Path: /home/alrezni/src/cntk_git
-------------------------------------------------------------------
Changed current directory to /tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
04/28/2016 16:59:56: Redirecting stderr to file -_Train_Test.log
04/28/2016 16:59:56: -------------------------------------------------------------------
04/28/2016 16:59:56: Build info: 

04/28/2016 16:59:56: 		Built time: Apr 26 2016 17:04:28
04/28/2016 16:59:56: 		Last modified date: Tue Apr  5 16:01:37 2016
04/28/2016 16:59:56: 		Build type: release
04/28/2016 16:59:56: 		Build target: GPU
04/28/2016 16:59:56: 		With 1bit-SGD: yes
04/28/2016 16:59:56: 		Math lib: acml
04/28/2016 16:59:56: 		CUDA_PATH: /usr/local/cuda-7.0
04/28/2016 16:59:56: 		CUB_PATH: /usr/local/cub-1.4.1
04/28/2016 16:59:56: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/28/2016 16:59:56: 		Build Branch: alrezni/examples_text
04/28/2016 16:59:56: 		Build SHA1: 780d0d14f555f568d393793562f374f04af79a73
04/28/2016 16:59:56: 		Built by alrezni on atleneu04
04/28/2016 16:59:56: 		Build Path: /home/alrezni/src/cntk_git
04/28/2016 16:59:56: -------------------------------------------------------------------

04/28/2016 16:59:56: Running on localhost at 2016/04/28 16:59:56
04/28/2016 16:59:56: Command line: 
/home/alrezni/src/cntk_git/build/release/bin/cntk  configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/Config/02_BatchNormConv.cntk  currentDirectory=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData  RunDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu  DataDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData  ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10  OutputDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  stderr=-



04/28/2016 16:59:56: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/28/2016 16:59:56: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
command = Train:Test
stderr = "$OutputDir$/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "$ModelDir$/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
Test = [
    action = "test"
    modelPath = "$ModelDir$/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
RunDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DataDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

04/28/2016 16:59:56: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/28/2016 16:59:56: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/28/2016 16:59:56: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models"
ndlMacros = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
command = Train:Test
stderr = "/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
Test = [
    action = "test"
    modelPath = "/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
RunDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DataDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
OutputDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

04/28/2016 16:59:56: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/28/2016 16:59:56: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_BatchNormConv.cntk:command=Train:Test
configparameters: 02_BatchNormConv.cntk:ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10
configparameters: 02_BatchNormConv.cntk:currentDirectory=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
configparameters: 02_BatchNormConv.cntk:DataDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData
configparameters: 02_BatchNormConv.cntk:deviceId=0
configparameters: 02_BatchNormConv.cntk:imageLayout=cudnn
configparameters: 02_BatchNormConv.cntk:initOnCPUOnly=true
configparameters: 02_BatchNormConv.cntk:ModelDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models
configparameters: 02_BatchNormConv.cntk:ndlMacros=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/Macros.ndl
configparameters: 02_BatchNormConv.cntk:numMBsToShowResult=500
configparameters: 02_BatchNormConv.cntk:OutputDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:precision=float
configparameters: 02_BatchNormConv.cntk:prefetch=true
configparameters: 02_BatchNormConv.cntk:RootDir=.
configparameters: 02_BatchNormConv.cntk:RunDir=/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:stderr=-
configparameters: 02_BatchNormConv.cntk:Test=[
    action = "test"
    modelPath = "/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 02_BatchNormConv.cntk:timestamping=true
configparameters: 02_BatchNormConv.cntk:traceLevel=1
configparameters: 02_BatchNormConv.cntk:Train=[
    action = "train"
    modelPath = "/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv/../../../../../../../../Examples/Image/Miscellaneous/CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]]

04/28/2016 16:59:56: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/28/2016 16:59:56: Commands: Train Test
04/28/2016 16:59:56: Precision = "float"
04/28/2016 16:59:56: CNTKModelPath: /tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv
04/28/2016 16:59:56: CNTKCommandTrainInfo: Train : 5
04/28/2016 16:59:56: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

04/28/2016 16:59:56: ##############################################################################
04/28/2016 16:59:56: #                                                                            #
04/28/2016 16:59:56: # Action "train"                                                             #
04/28/2016 16:59:56: #                                                                            #
04/28/2016 16:59:56: ##############################################################################

04/28/2016 16:59:56: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

04/28/2016 16:59:57: Creating virgin network.
SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 32 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *] -> [32 x 32 x 32 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *] -> [3 x 3 x 64 x *]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *] -> [64 x *]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *] -> [64 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/28/2016 16:59:57: Created model with 45 nodes on GPU 0.

04/28/2016 16:59:57: Training criterion node(s):
04/28/2016 16:59:57: 	CE = CrossEntropyWithSoftmax

04/28/2016 16:59:57: Evaluation criterion node(s):

04/28/2016 16:59:57: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[Err Gradient[1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *]] [features Gradient[32 x 32 x 3 x *]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [labels Gradient[10 x *]] }
0x2020178: {[features Value[32 x 32 x 3 x *]] }
0x273b868: {[featOffs Value[1 x 1]] }
0x2c03ea8: {[h1.W Value[64 x 3 x 3 x 64]] }
0x2c04678: {[h1.b Value[64 x 1]] }
0x2c050c8: {[h1.sc Value[64 x 1]] }
0x2c05aa8: {[h1.m Value[64 x 1]] }
0x2c065c8: {[h1.isd Value[64 x 1]] }
0x2c07ad8: {[OutputNodes.W Value[10 x 64]] }
0x2c088f8: {[OutputNodes.b Value[10]] }
0x2c1baa8: {[labels Value[10 x *]] }
0x2c1c5c8: {[conv1.c.W Value[32 x 75]] }
0x2c1cdf8: {[conv1.c.c.b Value[32 x 1]] }
0x2c1d7e8: {[conv1.c.c.sc Value[32 x 1]] }
0x2c1e328: {[conv1.c.c.m Value[32 x 1]] }
0x2c1ee78: {[conv1.c.c.isd Value[32 x 1]] }
0x2c20c88: {[conv2.c.W Value[32 x 800]] }
0x2c21918: {[conv3.c.c.isd Value[64 x 1]] }
0x2c21c18: {[conv2.c.c.b Value[32 x 1]] }
0x2c22608: {[conv2.c.c.sc Value[32 x 1]] }
0x2c23148: {[conv2.c.c.m Value[32 x 1]] }
0x2c23c98: {[conv2.c.c.isd Value[32 x 1]] }
0x2c25a08: {[conv3.c.W Value[64 x 800]] }
0x2c261d8: {[conv3.c.c.b Value[64 x 1]] }
0x2c26b68: {[conv3.c.c.sc Value[64 x 1]] }
0x2c276a8: {[conv3.c.c.m Value[64 x 1]] }
0xc9ff868: {[conv2.c.c.y Gradient[15 x 15 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
0xc9ffa28: {[conv2.c.W Gradient[32 x 800]] [conv3.c.c.c Value[7 x 7 x 64 x *]] }
0xc9ffbe8: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[15 x 15 x 32 x *]] }
0xc9ffda8: {[conv3.c.c.y Value[7 x 7 x 64 x *]] }
0xca002e8: {[conv2.c.c.b Gradient[32 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *]] [conv3.y Value[7 x 7 x 64 x *]] }
0xca004a8: {[conv3.c.c.y Gradient[7 x 7 x 64 x *]] [pool3 Value[3 x 3 x 64 x *]] }
0xca00668: {[conv3.c.c.sc Gradient[64 x 1]] [conv3.y Gradient[7 x 7 x 64 x *]] [h1.t Value[64 x *]] }
0xca00828: {[h1.bn Value[64 x *]] }
0xca00ba8: {[conv3.c.c.b Gradient[64 x 1]] }
0xca00d68: {[conv3.c.W Gradient[64 x 800]] [h1.t Gradient[64 x *]] [h1.y Value[64 x *]] }
0xca00f28: {[OutputNodes.t Value[10 x *]] [h1.bn Gradient[64 x *]] }
0xca010e8: {[OutputNodes.W Gradient[10 x 64]] [OutputNodes.z Value[10 x *]] }
0xca012d8: {[CE Value[1]] }
0xca01848: {[Err Value[1]] }
0xca01f48: {[CE Gradient[1]] }
0xca02108: {[OutputNodes.z Gradient[10 x *]] [h1.sc Gradient[64 x 1]] [h1.y Gradient[64 x *]] }
0xca022c8: {[OutputNodes.t Gradient[10 x *]] [pool1 Gradient[15 x 15 x 32 x *]] [pool2 Gradient[7 x 7 x 32 x *]] [pool3 Gradient[3 x 3 x 64 x *]] }
0xca02488: {[OutputNodes.b Gradient[10]] }
0xca02678: {[h1.W Gradient[64 x 3 x 3 x 64]] }
0xca02838: {[h1.b Gradient[64 x 1]] }
0xca0a278: {[conv1.c.c.c Gradient[32 x 32 x 32 x *]] [conv1.y Value[32 x 32 x 32 x *]] }
0xca0a438: {[conv1.c.c.y Gradient[32 x 32 x 32 x *]] [pool1 Value[15 x 15 x 32 x *]] }
0xca28218: {[conv1.c.c.c Value[32 x 32 x 32 x *]] }
0xca31688: {[featScaled Value[32 x 32 x 3 x *]] }
0xca318b8: {[conv1.c.c.y Value[32 x 32 x 32 x *]] }
0xca32ac8: {[conv1.c.W Gradient[32 x 75]] [conv2.c.c.c Value[15 x 15 x 32 x *]] }
0xca32c88: {[conv1.c.c.sc Gradient[32 x 1]] [conv1.y Gradient[32 x 32 x 32 x *]] }
0xca32e48: {[conv2.c.c.y Value[15 x 15 x 32 x *]] }
0xca332c8: {[conv1.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *]] [conv2.y Value[15 x 15 x 32 x *]] }

04/28/2016 16:59:57: No PreCompute nodes found, skipping PreCompute step.

04/28/2016 16:59:57: Starting Epoch 1: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/28/2016 16:59:57: Starting minibatch loop.
04/28/2016 17:00:01: Finished Epoch[ 1 of 5]: [Training Set] TrainLossPerSample = 2.293437; TotalSamplesSeen = 100; EvalErrPerSample = 0.87; AvgLearningRatePerSample = 0.00046874999; EpochTime=3.15132
04/28/2016 17:00:01: SGD: Saving checkpoint model '/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.1'

04/28/2016 17:00:01: Starting Epoch 2: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/28/2016 17:00:01: Starting minibatch loop.
04/28/2016 17:00:01: Finished Epoch[ 2 of 5]: [Training Set] TrainLossPerSample = 2.2282497; TotalSamplesSeen = 200; EvalErrPerSample = 0.87; AvgLearningRatePerSample = 0.00046874999; EpochTime=0.014717
04/28/2016 17:00:01: SGD: Saving checkpoint model '/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.2'

04/28/2016 17:00:01: Starting Epoch 3: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/28/2016 17:00:01: Starting minibatch loop.
04/28/2016 17:00:01: Finished Epoch[ 3 of 5]: [Training Set] TrainLossPerSample = 2.2264603; TotalSamplesSeen = 300; EvalErrPerSample = 0.88; AvgLearningRatePerSample = 0.00046874999; EpochTime=0.014586
04/28/2016 17:00:01: SGD: Saving checkpoint model '/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.3'

04/28/2016 17:00:01: Starting Epoch 4: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/28/2016 17:00:01: Starting minibatch loop.
04/28/2016 17:00:01: Finished Epoch[ 4 of 5]: [Training Set] TrainLossPerSample = 2.2009717; TotalSamplesSeen = 400; EvalErrPerSample = 0.78; AvgLearningRatePerSample = 0.00046874999; EpochTime=0.014755
04/28/2016 17:00:01: SGD: Saving checkpoint model '/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.4'

04/28/2016 17:00:01: Starting Epoch 5: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples

04/28/2016 17:00:01: Starting minibatch loop.
04/28/2016 17:00:01: Finished Epoch[ 5 of 5]: [Training Set] TrainLossPerSample = 2.1728094; TotalSamplesSeen = 500; EvalErrPerSample = 0.77; AvgLearningRatePerSample = 0.00046874999; EpochTime=0.014742
04/28/2016 17:00:01: SGD: Saving checkpoint model '/tmp/cntk-test-20160428165955.933680/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv'
04/28/2016 17:00:01: CNTKCommandTrainEnd: Train

04/28/2016 17:00:01: Action "train" complete.


04/28/2016 17:00:01: ##############################################################################
04/28/2016 17:00:01: #                                                                            #
04/28/2016 17:00:01: # Action "test"                                                              #
04/28/2016 17:00:01: #                                                                            #
04/28/2016 17:00:01: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 32 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *1] -> [32 x 32 x 32 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *1] -> [3 x 3 x 64 x *1]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *1] -> [64 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *1] -> [64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[32 x 75]] [conv1.c.c.b Gradient[32 x 1]] [conv1.c.c.c Gradient[32 x 32 x 32 x *1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv1.c.c.sc Gradient[32 x 1]] [conv1.c.c.y Gradient[32 x 32 x 32 x *1]] [conv1.y Gradient[32 x 32 x 32 x *1]] [conv2.c.W Gradient[32 x 800]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[15 x 15 x 32 x *1]] [conv2.y Gradient[15 x 15 x 32 x *1]] [conv3.c.W Gradient[64 x 800]] [conv3.c.c.b Gradient[64 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [conv3.c.c.sc Gradient[64 x 1]] [conv3.c.c.y Gradient[7 x 7 x 64 x *1]] [conv3.y Gradient[7 x 7 x 64 x *1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *1]] [features Gradient[32 x 32 x 3 x *1]] [h1.W Gradient[64 x 3 x 3 x 64]] [h1.b Gradient[64 x 1]] [h1.bn Gradient[64 x *1]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [h1.sc Gradient[64 x 1]] [h1.t Gradient[64 x *1]] [h1.y Gradient[64 x *1]] [labels Gradient[10 x *1]] [pool1 Gradient[15 x 15 x 32 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] [pool3 Gradient[3 x 3 x 64 x *1]] }
0x201e408: {[conv1.c.c.b Value[32 x 1]] }
0x20209a8: {[h1.isd Value[64 x 1]] }
0x2022538: {[h1.b Value[64 x 1]] }
0x2023468: {[conv1.c.c.isd Value[32 x 1]] }
0x2023f68: {[conv2.c.W Value[32 x 800]] }
0x2027498: {[h1.m Value[64 x 1]] }
0x20275f8: {[h1.sc Value[64 x 1]] }
0x20303b8: {[conv1.c.c.sc Value[32 x 1]] }
0x20487a8: {[conv1.c.c.m Value[32 x 1]] }
0x2077c48: {[conv2.y Value[15 x 15 x 32 x *1]] }
0x2077e08: {[pool2 Value[7 x 7 x 32 x *1]] }
0x2077fc8: {[conv3.c.c.c Value[7 x 7 x 64 x *1]] }
0x2078348: {[conv3.c.c.y Value[7 x 7 x 64 x *1]] }
0x2080f78: {[h1.W Value[64 x 3 x 3 x 64]] }
0x2081548: {[conv3.c.c.m Value[64 x 1]] }
0x2081658: {[conv3.c.W Value[64 x 800]] }
0x20a59b8: {[featOffs Value[1 x 1]] }
0x20a7778: {[conv3.c.c.sc Value[64 x 1]] }
0x20a8038: {[conv2.c.c.m Value[32 x 1]] }
0x273ae58: {[conv1.y Value[32 x 32 x 32 x *1]] }
0x273afb8: {[pool1 Value[15 x 15 x 32 x *1]] }
0x273b588: {[conv2.c.c.c Value[15 x 15 x 32 x *1]] }
0x273b908: {[conv2.c.c.y Value[15 x 15 x 32 x *1]] }
0x2c02488: {[conv3.y Value[7 x 7 x 64 x *1]] }
0x2c02648: {[pool3 Value[3 x 3 x 64 x *1]] }
0x2c02808: {[h1.t Value[64 x *1]] }
0x2c029c8: {[h1.bn Value[64 x *1]] }
0x2c02f08: {[h1.y Value[64 x *1]] }
0x2c030c8: {[OutputNodes.t Value[10 x *1]] }
0x2c07bf8: {[conv1.c.c.y Value[32 x 32 x 32 x *1]] }
0x2c09328: {[conv2.c.c.isd Value[32 x 1]] }
0x2c0a3f8: {[conv1.c.W Value[32 x 75]] }
0x2c1b9e8: {[labels Value[10 x *1]] }
0x2c200f8: {[conv3.c.c.b Value[64 x 1]] }
0x2c20c88: {[conv2.c.c.sc Value[32 x 1]] }
0x2c27a88: {[OutputNodes.b Value[10]] }
0x3240688: {[OutputNodes.W Value[10 x 64]] }
0x3243c78: {[featScaled Value[32 x 32 x 3 x *1]] }
0xca028d8: {[conv3.c.c.isd Value[64 x 1]] }
0xca044e8: {[features Value[32 x 32 x 3 x *1]] }
0xca2e908: {[OutputNodes.z Value[10 x *1]] }
0xca2eaf8: {[CE Value[1]] }
0xca2f068: {[Err Value[1]] }
0xca325b8: {[conv1.c.c.c Value[32 x 32 x 32 x *1]] }
0x10b51f68: {[conv2.c.c.b Value[32 x 1]] }

Final Results: Minibatch[1-625]: SamplesSeen = 10000    Err: ErrorPrediction/Sample = 0.8833    CE: CrossEntropyWithSoftmax/Sample = 2.4096178    Perplexity = 11.129707    

04/28/2016 17:00:06: Action "test" complete.

04/28/2016 17:00:06: __COMPLETED__