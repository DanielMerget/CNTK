=== Running /cygdrive/c/src/cntk_github/x64/release/cntk.exe configFile=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/Config/02_BatchNormConv.cntk currentDirectory=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData RunDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu DataDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData ConfigDir=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: May  3 2016 12:19:59
		Last modified date: Thu Apr  7 11:05:47 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: no
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: E:\lib\cub-1.4.1
		CUDNN_PATH: E:\lib\cuDNN_v4
		Build Branch: alrezni/examples_text
		Build SHA1: d5e576046e2fa850c4296da155f15c2b08b7927a
		Built by alrezni on DIFFENG
		Build Path: C:\src\cntk_github\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
05/03/2016 14:15:26: Redirecting stderr to file -_Train_Test.log
05/03/2016 14:15:26: -------------------------------------------------------------------
05/03/2016 14:15:26: Build info: 

05/03/2016 14:15:26: 		Built time: May  3 2016 12:19:59
05/03/2016 14:15:26: 		Last modified date: Thu Apr  7 11:05:47 2016
05/03/2016 14:15:26: 		Build type: Release
05/03/2016 14:15:26: 		Build target: GPU
05/03/2016 14:15:26: 		With 1bit-SGD: no
05/03/2016 14:15:26: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
05/03/2016 14:15:26: 		CUB_PATH: E:\lib\cub-1.4.1
05/03/2016 14:15:26: 		CUDNN_PATH: E:\lib\cuDNN_v4
05/03/2016 14:15:26: 		Build Branch: alrezni/examples_text
05/03/2016 14:15:26: 		Build SHA1: d5e576046e2fa850c4296da155f15c2b08b7927a
05/03/2016 14:15:26: 		Built by alrezni on DIFFENG
05/03/2016 14:15:26: 		Build Path: C:\src\cntk_github\Source\CNTK\
05/03/2016 14:15:26: -------------------------------------------------------------------

05/03/2016 14:15:26: Running on DIFFENG at 2016/05/03 14:15:26
05/03/2016 14:15:26: Command line: 
C:\src\cntk_github\x64\release\cntk.exe  configFile=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/Config/02_BatchNormConv.cntk  currentDirectory=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData  RunDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu  DataDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData  ConfigDir=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  stderr=-



05/03/2016 14:15:26: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
05/03/2016 14:15:26: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
command = Train:Test
stderr = "$OutputDir$/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "$ModelDir$/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
Test = [
    action = "test"
    modelPath = "$ModelDir$/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
RunDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
DataDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
ConfigDir=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

05/03/2016 14:15:26: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

05/03/2016 14:15:26: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
05/03/2016 14:15:26: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models"
ndlMacros = "C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
initOnCPUOnly=true
prefetch = "true"
command = Train:Test
stderr = "E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/02_BatchNormConv"
traceLevel = 1
numMBsToShowResult = 500
Train = [
    action = "train"
    modelPath = "E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
Test = [
    action = "test"
    modelPath = "E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
RunDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
DataDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
ConfigDir=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

05/03/2016 14:15:26: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

05/03/2016 14:15:26: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 02_BatchNormConv.cntk:command=Train:Test
configparameters: 02_BatchNormConv.cntk:ConfigDir=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 02_BatchNormConv.cntk:currentDirectory=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
configparameters: 02_BatchNormConv.cntk:DataDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData
configparameters: 02_BatchNormConv.cntk:deviceId=0
configparameters: 02_BatchNormConv.cntk:imageLayout=cudnn
configparameters: 02_BatchNormConv.cntk:initOnCPUOnly=true
configparameters: 02_BatchNormConv.cntk:ModelDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models
configparameters: 02_BatchNormConv.cntk:ndlMacros=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl
configparameters: 02_BatchNormConv.cntk:numMBsToShowResult=500
configparameters: 02_BatchNormConv.cntk:OutputDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:precision=float
configparameters: 02_BatchNormConv.cntk:prefetch=true
configparameters: 02_BatchNormConv.cntk:RootDir=.
configparameters: 02_BatchNormConv.cntk:RunDir=E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu
configparameters: 02_BatchNormConv.cntk:stderr=-
configparameters: 02_BatchNormConv.cntk:Test=[
    action = "test"
    modelPath = "E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 02_BatchNormConv.cntk:timestamping=true
configparameters: 02_BatchNormConv.cntk:traceLevel=1
configparameters: 02_BatchNormConv.cntk:Train=[
    action = "train"
    modelPath = "E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv"
     NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/02_BatchNormConv.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.03*7:0.01
        momentumPerMB = 0
        maxEpochs = 10
        L2RegWeight = 0
        dropoutRate = 0
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu\TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]]

05/03/2016 14:15:26: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
05/03/2016 14:15:26: Commands: Train Test
05/03/2016 14:15:26: Precision = "float"
05/03/2016 14:15:26: CNTKModelPath: E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv
05/03/2016 14:15:26: CNTKCommandTrainInfo: Train : 5
05/03/2016 14:15:26: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

05/03/2016 14:15:26: ##############################################################################
05/03/2016 14:15:26: #                                                                            #
05/03/2016 14:15:26: # Action "train"                                                             #
05/03/2016 14:15:26: #                                                                            #
05/03/2016 14:15:26: ##############################################################################

05/03/2016 14:15:26: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

05/03/2016 14:15:27: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 32 x *]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *] -> [32 x 32 x 32 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *] -> [15 x 15 x 32 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *] -> [3 x 3 x 64 x *]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *] -> [64 x *]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *] -> [64 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

05/03/2016 14:15:28: Created model with 45 nodes on GPU 0.

05/03/2016 14:15:28: Training criterion node(s):
05/03/2016 14:15:28: 	CE = CrossEntropyWithSoftmax

05/03/2016 14:15:28: Evaluation criterion node(s):

05/03/2016 14:15:28: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[Err Gradient[1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *]] [features Gradient[32 x 32 x 3 x *]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [labels Gradient[10 x *]] }
000000879C9C30C0: {[conv1.c.c.b Value[32 x 1]] }
000000879CA21350: {[featOffs Value[1 x 1]] }
000000879CA22610: {[labels Value[10 x *]] }
000000879CA22750: {[features Value[32 x 32 x 3 x *]] }
000000879CA229D0: {[conv1.c.W Value[32 x 75]] }
00000087B2DEF250: {[h1.m Value[64 x 1]] }
00000087B2DEF2F0: {[conv2.c.c.isd Value[32 x 1]] }
00000087B2DEF4D0: {[conv2.c.c.b Value[32 x 1]] }
00000087B2DEF6B0: {[conv3.c.c.isd Value[64 x 1]] }
00000087B2DEF750: {[conv1.c.c.isd Value[32 x 1]] }
00000087B2DEF890: {[h1.sc Value[64 x 1]] }
00000087B2DEFA70: {[h1.W Value[64 x 3 x 3 x 64]] }
00000087B2DEFB10: {[h1.isd Value[64 x 1]] }
00000087B2DEFCF0: {[conv3.c.c.m Value[64 x 1]] }
00000087B2DEFF70: {[conv2.c.c.sc Value[32 x 1]] }
00000087B2DF0150: {[conv3.c.W Value[64 x 800]] }
00000087B2DF01F0: {[conv3.c.c.b Value[64 x 1]] }
00000087B2DF0290: {[conv3.c.c.sc Value[64 x 1]] }
00000087B2DF06F0: {[conv1.c.c.m Value[32 x 1]] }
00000087B2DF0A10: {[conv2.c.W Value[32 x 800]] }
00000087B2DF0AB0: {[conv2.c.c.m Value[32 x 1]] }
00000087B2DF0E70: {[conv1.c.c.sc Value[32 x 1]] }
00000087B2DF0F10: {[h1.b Value[64 x 1]] }
00000087B2DFDC90: {[OutputNodes.b Value[10]] }
00000087B2DFE370: {[OutputNodes.W Value[10 x 64]] }
00000087BB32EF30: {[conv2.c.c.sc Gradient[32 x 1]] [conv2.y Gradient[15 x 15 x 32 x *]] }
00000087BB32EFD0: {[conv3.c.c.sc Gradient[64 x 1]] [conv3.y Gradient[7 x 7 x 64 x *]] [h1.t Value[64 x *]] }
00000087BB32F110: {[conv1.c.c.y Gradient[32 x 32 x 32 x *]] [pool1 Value[15 x 15 x 32 x *]] }
00000087BB32F1B0: {[conv3.c.c.y Gradient[7 x 7 x 64 x *]] [pool3 Value[3 x 3 x 64 x *]] }
00000087BB32F390: {[conv2.c.c.y Value[15 x 15 x 32 x *]] }
00000087BB32F4D0: {[CE Value[1]] }
00000087BB32F570: {[conv1.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *]] [conv2.y Value[15 x 15 x 32 x *]] }
00000087BB32F610: {[conv2.c.c.y Gradient[15 x 15 x 32 x *]] [pool2 Value[7 x 7 x 32 x *]] }
00000087BB32F750: {[conv3.c.c.y Value[7 x 7 x 64 x *]] }
00000087BB32FB10: {[conv1.c.c.c Value[32 x 32 x 32 x *]] }
00000087BB32FBB0: {[conv1.c.c.y Value[32 x 32 x 32 x *]] }
00000087BB32FC50: {[conv1.c.c.sc Gradient[32 x 1]] [conv1.y Gradient[32 x 32 x 32 x *]] }
00000087BB32FCF0: {[h1.bn Value[64 x *]] }
00000087BB32FD90: {[conv3.c.W Gradient[64 x 800]] [h1.t Gradient[64 x *]] [h1.y Value[64 x *]] }
00000087BB330010: {[conv2.c.c.b Gradient[32 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *]] [conv3.y Value[7 x 7 x 64 x *]] }
00000087BB3303D0: {[conv1.c.c.c Gradient[32 x 32 x 32 x *]] [conv1.y Value[32 x 32 x 32 x *]] }
00000087BB3305B0: {[conv3.c.c.b Gradient[64 x 1]] }
00000087BB330650: {[OutputNodes.t Value[10 x *]] [h1.bn Gradient[64 x *]] }
00000087BB3308D0: {[CE Gradient[1]] }
00000087BB330970: {[OutputNodes.W Gradient[10 x 64]] [OutputNodes.z Gradient[10 x *]] }
00000087BB330AB0: {[OutputNodes.t Gradient[10 x *]] [pool1 Gradient[15 x 15 x 32 x *]] [pool2 Gradient[7 x 7 x 32 x *]] [pool3 Gradient[3 x 3 x 64 x *]] }
00000087BB330B50: {[OutputNodes.b Gradient[10]] }
00000087BB330D30: {[conv1.c.W Gradient[32 x 75]] [conv2.c.c.c Value[15 x 15 x 32 x *]] }
00000087BB330E70: {[featScaled Value[32 x 32 x 3 x *]] }
00000087BB3310F0: {[Err Value[1]] }
00000087BB331190: {[conv2.c.W Gradient[32 x 800]] [conv3.c.c.c Value[7 x 7 x 64 x *]] }
00000087BB3312D0: {[OutputNodes.z Value[10 x *]] }
00000087BBA0B330: {[h1.W Gradient[64 x 3 x 3 x 64]] }
00000087BBA0B8D0: {[h1.sc Gradient[64 x 1]] [h1.y Gradient[64 x *]] }
00000087BBA0BF10: {[h1.b Gradient[64 x 1]] }

05/03/2016 14:15:28: No PreCompute nodes found, skipping PreCompute step.

05/03/2016 14:15:28: Starting Epoch 1: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples

05/03/2016 14:15:28: Starting minibatch loop.
05/03/2016 14:15:36: Finished Epoch[ 1 of 5]: [Training] CE = 2.31451355 * 100; Err = 0.87000000 * 100; totalSamplesSeen = 100; learningRatePerSample = 0.00046874999; epochTime=7.82817s
05/03/2016 14:15:36: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.1'

05/03/2016 14:15:36: Starting Epoch 2: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples

05/03/2016 14:15:36: Starting minibatch loop.
05/03/2016 14:15:36: Finished Epoch[ 2 of 5]: [Training] CE = 2.27380722 * 100; Err = 0.82000000 * 100; totalSamplesSeen = 200; learningRatePerSample = 0.00046874999; epochTime=0.067553s
05/03/2016 14:15:36: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.2'

05/03/2016 14:15:36: Starting Epoch 3: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples

05/03/2016 14:15:36: Starting minibatch loop.
05/03/2016 14:15:36: Finished Epoch[ 3 of 5]: [Training] CE = 2.25248398 * 100; Err = 0.83000000 * 100; totalSamplesSeen = 300; learningRatePerSample = 0.00046874999; epochTime=0.069514s
05/03/2016 14:15:36: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.3'

05/03/2016 14:15:36: Starting Epoch 4: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples

05/03/2016 14:15:36: Starting minibatch loop.
05/03/2016 14:15:37: Finished Epoch[ 4 of 5]: [Training] CE = 2.15781601 * 100; Err = 0.77000000 * 100; totalSamplesSeen = 400; learningRatePerSample = 0.00046874999; epochTime=0.068291s
05/03/2016 14:15:37: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv.4'

05/03/2016 14:15:37: Starting Epoch 5: learning rate per sample = 0.000469  effective momentum = 0.000000  momentum as time constant = 0.0 samples

05/03/2016 14:15:37: Starting minibatch loop.
05/03/2016 14:15:37: Finished Epoch[ 5 of 5]: [Training] CE = 2.12939789 * 100; Err = 0.71000000 * 100; totalSamplesSeen = 500; learningRatePerSample = 0.00046874999; epochTime=0.064958s
05/03/2016 14:15:37: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160503151521.251675\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_02_BatchNormConv@release_gpu/Models/02_BatchNormConv'
05/03/2016 14:15:37: CNTKCommandTrainEnd: Train

05/03/2016 14:15:37: Action "train" complete.


05/03/2016 14:15:37: ##############################################################################
05/03/2016 14:15:37: #                                                                            #
05/03/2016 14:15:37: # Action "test"                                                              #
05/03/2016 14:15:37: #                                                                            #
05/03/2016 14:15:37: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 45 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 64]
Validating --> h1.W = LearnableParameter() :  -> [64 x 3 x 3 x 64]
Validating --> conv3.c.W = LearnableParameter() :  -> [64 x 800]
Validating --> conv2.c.W = LearnableParameter() :  -> [32 x 800]
Validating --> conv1.c.W = LearnableParameter() :  -> [32 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c.c.c = Convolution (conv1.c.W, featScaled) : [32 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 32 x *1]
Validating --> conv1.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv1.c.c.y = BatchNormalization (conv1.c.c.c, conv1.c.c.sc, conv1.c.c.b, conv1.c.c.m, conv1.c.c.isd) : [32 x 32 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [32 x 32 x 32 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.c.c.y) : [32 x 32 x 32 x *1] -> [32 x 32 x 32 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.c = Convolution (conv2.c.W, pool1) : [32 x 800], [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> conv2.c.c.sc = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.b = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.m = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.isd = LearnableParameter() :  -> [32 x 1]
Validating --> conv2.c.c.y = BatchNormalization (conv2.c.c.c, conv2.c.c.sc, conv2.c.c.b, conv2.c.c.m, conv2.c.c.isd) : [15 x 15 x 32 x *1], [32 x 1], [32 x 1], [32 x 1], [32 x 1] -> [15 x 15 x 32 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.c.c.y) : [15 x 15 x 32 x *1] -> [15 x 15 x 32 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv3.c.c.c = Convolution (conv3.c.W, pool2) : [64 x 800], [7 x 7 x 32 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c.c.sc = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.b = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.m = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.isd = LearnableParameter() :  -> [64 x 1]
Validating --> conv3.c.c.y = BatchNormalization (conv3.c.c.c, conv3.c.c.sc, conv3.c.c.b, conv3.c.c.m, conv3.c.c.isd) : [7 x 7 x 64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.c.c.y) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> pool3 = MaxPooling (conv3.y) : [7 x 7 x 64 x *1] -> [3 x 3 x 64 x *1]
Validating --> h1.t = Times (h1.W, pool3) : [64 x 3 x 3 x 64], [3 x 3 x 64 x *1] -> [64 x *1]
Validating --> h1.sc = LearnableParameter() :  -> [64 x 1]
Validating --> h1.b = LearnableParameter() :  -> [64 x 1]
Validating --> h1.m = LearnableParameter() :  -> [64 x 1]
Validating --> h1.isd = LearnableParameter() :  -> [64 x 1]
Validating --> h1.bn = BatchNormalization (h1.t, h1.sc, h1.b, h1.m, h1.isd) : [64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1] -> [64 x *1]
Validating --> h1.y = RectifiedLinear (h1.bn) : [64 x *1] -> [64 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, h1.y) : [10 x 64], [64 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 20 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 32, Kernel: 5 x 5 x 3, Map: 1 x 1 x 32, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 32, Output: 15 x 15 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 15 x 15 x 32, Kernel: 5 x 5 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 32, Output: 7 x 7 x 32, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 32, Output: 7 x 7 x 64, Kernel: 5 x 5 x 32, Map: 1 x 1 x 64, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.

Using cuDNN convolution engine for geometry: Input: 7 x 7 x 64, Output: 3 x 3 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using CNTK batch normalization engine.


25 out of 45 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 64]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.c.W Gradient[32 x 75]] [conv1.c.c.b Gradient[32 x 1]] [conv1.c.c.c Gradient[32 x 32 x 32 x *1]] [conv1.c.c.isd Gradient[32 x 1]] [conv1.c.c.m Gradient[32 x 1]] [conv1.c.c.sc Gradient[32 x 1]] [conv1.c.c.y Gradient[32 x 32 x 32 x *1]] [conv1.y Gradient[32 x 32 x 32 x *1]] [conv2.c.W Gradient[32 x 800]] [conv2.c.c.b Gradient[32 x 1]] [conv2.c.c.c Gradient[15 x 15 x 32 x *1]] [conv2.c.c.isd Gradient[32 x 1]] [conv2.c.c.m Gradient[32 x 1]] [conv2.c.c.sc Gradient[32 x 1]] [conv2.c.c.y Gradient[15 x 15 x 32 x *1]] [conv2.y Gradient[15 x 15 x 32 x *1]] [conv3.c.W Gradient[64 x 800]] [conv3.c.c.b Gradient[64 x 1]] [conv3.c.c.c Gradient[7 x 7 x 64 x *1]] [conv3.c.c.isd Gradient[64 x 1]] [conv3.c.c.m Gradient[64 x 1]] [conv3.c.c.sc Gradient[64 x 1]] [conv3.c.c.y Gradient[7 x 7 x 64 x *1]] [conv3.y Gradient[7 x 7 x 64 x *1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *1]] [features Gradient[32 x 32 x 3 x *1]] [h1.W Gradient[64 x 3 x 3 x 64]] [h1.b Gradient[64 x 1]] [h1.bn Gradient[64 x *1]] [h1.isd Gradient[64 x 1]] [h1.m Gradient[64 x 1]] [h1.sc Gradient[64 x 1]] [h1.t Gradient[64 x *1]] [h1.y Gradient[64 x *1]] [labels Gradient[10 x *1]] [pool1 Gradient[15 x 15 x 32 x *1]] [pool2 Gradient[7 x 7 x 32 x *1]] [pool3 Gradient[3 x 3 x 64 x *1]] }
00000087BB32EDF0: {[conv2.c.c.y Value[15 x 15 x 32 x *1]] }
00000087BB32EF30: {[h1.t Value[64 x *1]] }
00000087BB32F1B0: {[conv3.c.c.y Value[7 x 7 x 64 x *1]] }
00000087BB32F4D0: {[h1.y Value[64 x *1]] }
00000087BB32F750: {[Err Value[1]] }
00000087BB32FBB0: {[conv2.y Value[15 x 15 x 32 x *1]] }
00000087BB32FC50: {[OutputNodes.t Value[10 x *1]] }
00000087BB32FE30: {[pool2 Value[7 x 7 x 32 x *1]] }
00000087BB32FED0: {[conv3.c.c.c Value[7 x 7 x 64 x *1]] }
00000087BB330010: {[conv1.c.c.c Value[32 x 32 x 32 x *1]] }
00000087BB330330: {[CE Value[1]] }
00000087BB3303D0: {[featScaled Value[32 x 32 x 3 x *1]] }
00000087BB330470: {[conv1.y Value[32 x 32 x 32 x *1]] }
00000087BB3308D0: {[pool3 Value[3 x 3 x 64 x *1]] }
00000087BB330AB0: {[conv2.c.c.c Value[15 x 15 x 32 x *1]] }
00000087BB330FB0: {[conv3.y Value[7 x 7 x 64 x *1]] }
00000087BB331050: {[h1.bn Value[64 x *1]] }
00000087BB3310F0: {[conv1.c.c.y Value[32 x 32 x 32 x *1]] }
00000087BB331190: {[pool1 Value[15 x 15 x 32 x *1]] }
00000087BB3312D0: {[OutputNodes.z Value[10 x *1]] }
00000087BBA08310: {[conv3.c.c.m Value[64 x 1]] }
00000087BBA08590: {[conv2.c.c.sc Value[32 x 1]] }
00000087BBA08630: {[conv2.c.W Value[32 x 800]] }
00000087BBA08770: {[conv3.c.W Value[64 x 800]] }
00000087BBA08C70: {[h1.isd Value[64 x 1]] }
00000087BBA08DB0: {[h1.m Value[64 x 1]] }
00000087BBA08EF0: {[conv2.c.c.m Value[32 x 1]] }
00000087BBA09170: {[labels Value[10 x *1]] }
00000087BBA09210: {[OutputNodes.b Value[10]] }
00000087BBA09490: {[features Value[32 x 32 x 3 x *1]] }
00000087BBA095D0: {[h1.b Value[64 x 1]] }
00000087BBA09850: {[conv3.c.c.b Value[64 x 1]] }
00000087BBA09990: {[featOffs Value[1 x 1]] }
00000087BBA09A30: {[OutputNodes.W Value[10 x 64]] }
00000087BBA09D50: {[h1.sc Value[64 x 1]] }
00000087BBA09FD0: {[conv3.c.c.isd Value[64 x 1]] }
00000087BBA0A070: {[h1.W Value[64 x 3 x 3 x 64]] }
00000087BBA0A610: {[conv3.c.c.sc Value[64 x 1]] }
00000087BBA0A930: {[conv2.c.c.isd Value[32 x 1]] }
00000087BBA0ACF0: {[conv1.c.c.sc Value[32 x 1]] }
00000087BBA0B0B0: {[conv1.c.c.b Value[32 x 1]] }
00000087BBA0B150: {[conv1.c.W Value[32 x 75]] }
00000087BBA0B1F0: {[conv2.c.c.b Value[32 x 1]] }
00000087BBA0B970: {[conv1.c.c.m Value[32 x 1]] }
00000087BBA0BA10: {[conv1.c.c.isd Value[32 x 1]] }

05/03/2016 14:15:52: Final Results: Minibatch[1-625]: Err = 0.84580000 * 10000; CE = 2.27296713 * 10000; perplexity = 9.70816348

05/03/2016 14:15:52: Action "test" complete.

05/03/2016 14:15:52: __COMPLETED__