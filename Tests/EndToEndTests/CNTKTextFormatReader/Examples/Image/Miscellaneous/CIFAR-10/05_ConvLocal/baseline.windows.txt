=== Running /cygdrive/c/src/cntk_github/x64/release/cntk.exe configFile=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/Config/05_ConvLocal.cntk currentDirectory=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData RunDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu DataDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData ConfigDir=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10 OutputDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu DeviceId=0 timestamping=true Train=[SGD=[maxEpochs=5]] Train=[SGD=[epochSize=100]] stderr=-
-------------------------------------------------------------------
Build info: 

		Built time: Apr 26 2016 17:54:13
		Last modified date: Thu Apr  7 11:05:47 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: E:\lib\cub-1.4.1
		CUDNN_PATH: E:\lib\cuDNN_v4
		Build Branch: alrezni/examples_text
		Build SHA1: bacd6681dae457fcc823f84c2e635d69134b1219 (modified)
		Built by alrezni on DIFFENG
		Build Path: C:\src\cntk_github\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
04/28/2016 17:03:43: Redirecting stderr to file -_Train_Test.log
04/28/2016 17:03:43: -------------------------------------------------------------------
04/28/2016 17:03:43: Build info: 

04/28/2016 17:03:43: 		Built time: Apr 26 2016 17:54:13
04/28/2016 17:03:43: 		Last modified date: Thu Apr  7 11:05:47 2016
04/28/2016 17:03:43: 		Build type: Release
04/28/2016 17:03:43: 		Build target: GPU
04/28/2016 17:03:43: 		With 1bit-SGD: yes
04/28/2016 17:03:43: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
04/28/2016 17:03:43: 		CUB_PATH: E:\lib\cub-1.4.1
04/28/2016 17:03:43: 		CUDNN_PATH: E:\lib\cuDNN_v4
04/28/2016 17:03:43: 		Build Branch: alrezni/examples_text
04/28/2016 17:03:43: 		Build SHA1: bacd6681dae457fcc823f84c2e635d69134b1219 (modified)
04/28/2016 17:03:43: 		Built by alrezni on DIFFENG
04/28/2016 17:03:43: 		Build Path: C:\src\cntk_github\Source\CNTK\
04/28/2016 17:03:43: -------------------------------------------------------------------

04/28/2016 17:03:43: Running on DIFFENG at 2016/04/28 17:03:43
04/28/2016 17:03:43: Command line: 
C:\src\cntk_github\x64\release\cntk.exe  configFile=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/../../../../Tests/EndToEndTests/CNTKTextFormatReader/Examples/Image/Miscellaneous/CIFAR-10/Config/05_ConvLocal.cntk  currentDirectory=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData  RunDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu  DataDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData  ConfigDir=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10  OutputDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu  DeviceId=0  timestamping=true  Train=[SGD=[maxEpochs=5]]  Train=[SGD=[epochSize=100]]  stderr=-



04/28/2016 17:03:43: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/28/2016 17:03:43: RootDir = "."
ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
ndlMacros = "$ConfigDir$/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
prefetch = "true"
command = Train:Test
modelPath = "$ModelDir$/05_ConvLocal"
stderr = "$OutputDir$/05_ConvLocal"
traceLevel = 1
numMBsToShowResult = 50
Train = [
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "$ConfigDir$/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
Test = [
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
RunDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
DataDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
ConfigDir=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

04/28/2016 17:03:43: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/28/2016 17:03:43: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/28/2016 17:03:43: RootDir = "."
ConfigDir = "."
DataDir = "."
OutputDir = "./Output"
ModelDir = "E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models"
ndlMacros = "C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl"
precision = "float"
deviceId = 0
imageLayout = "cudnn"
prefetch = "true"
command = Train:Test
modelPath = "E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal"
stderr = "E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/05_ConvLocal"
traceLevel = 1
numMBsToShowResult = 50
Train = [
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
Test = [
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]
currentDirectory=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
RunDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
DataDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
ConfigDir=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10
OutputDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
DeviceId=0
timestamping=true
Train=[SGD=[maxEpochs=5]]
Train=[SGD=[epochSize=100]]
stderr=-

04/28/2016 17:03:43: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/28/2016 17:03:43: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: 05_ConvLocal.cntk:command=Train:Test
configparameters: 05_ConvLocal.cntk:ConfigDir=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10
configparameters: 05_ConvLocal.cntk:currentDirectory=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
configparameters: 05_ConvLocal.cntk:DataDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData
configparameters: 05_ConvLocal.cntk:deviceId=0
configparameters: 05_ConvLocal.cntk:imageLayout=cudnn
configparameters: 05_ConvLocal.cntk:ModelDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models
configparameters: 05_ConvLocal.cntk:modelPath=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal
configparameters: 05_ConvLocal.cntk:ndlMacros=C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/Macros.ndl
configparameters: 05_ConvLocal.cntk:numMBsToShowResult=50
configparameters: 05_ConvLocal.cntk:OutputDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
configparameters: 05_ConvLocal.cntk:precision=float
configparameters: 05_ConvLocal.cntk:prefetch=true
configparameters: 05_ConvLocal.cntk:RootDir=.
configparameters: 05_ConvLocal.cntk:RunDir=E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu
configparameters: 05_ConvLocal.cntk:stderr=-
configparameters: 05_ConvLocal.cntk:Test=[
    action = "test"
    minibatchSize = 16
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData/Test_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
]

configparameters: 05_ConvLocal.cntk:timestamping=true
configparameters: 05_ConvLocal.cntk:traceLevel=1
configparameters: 05_ConvLocal.cntk:Train=[
    action = "train"
     NDLNetworkBuilder = [
        networkDescription = "C:\src\cntk_github\Examples\Image\Miscellaneous\CIFAR-10/05_ConvLocal.ndl"
    ]
    SGD = [
        epochSize = 49984
        minibatchSize = 64
        learningRatesPerMB = 0.01*10:0.003*10:0.001
        momentumPerMB = 0.9*20:0.99
        maxEpochs = 30
        L2RegWeight = 0.03
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu\TestData/Train_cntk_text.txt"
        input = [
            features = [
                dim = 3072
                format = "dense"
            ]
            labels = [
                dim = 10
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=5]] [SGD=[epochSize=100]]

04/28/2016 17:03:44: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/28/2016 17:03:44: Commands: Train Test
04/28/2016 17:03:44: Precision = "float"
04/28/2016 17:03:44: CNTKModelPath: E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal
04/28/2016 17:03:44: CNTKCommandTrainInfo: Train : 5
04/28/2016 17:03:44: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 5

04/28/2016 17:03:44: ##############################################################################
04/28/2016 17:03:44: #                                                                            #
04/28/2016 17:03:44: # Action "train"                                                             #
04/28/2016 17:03:44: #                                                                            #
04/28/2016 17:03:44: ##############################################################################

04/28/2016 17:03:44: CNTKCommandTrainBegin: Train
NDLBuilder Using GPU 0

04/28/2016 17:03:44: Creating virgin network.
Microsoft::MSR::CNTK::GPUMatrix<ElemType>::SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 32 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 7 x 7 x 32]
Validating --> conv4.W = LearnableParameter() :  -> [1568 x 576]
Validating --> conv3.W = LearnableParameter() :  -> [3136 x 576]
Validating --> conv2.W = LearnableParameter() :  -> [64 x 1600]
Validating --> conv1.W = LearnableParameter() :  -> [64 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *], [1 x 1] -> [32 x 32 x 3 x *]
Validating --> conv1.c = Convolution (conv1.W, featScaled) : [64 x 75], [32 x 32 x 3 x *] -> [32 x 32 x 64 x *]
Validating --> conv1.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv1.p = Plus (conv1.c, conv1.b) : [32 x 32 x 64 x *], [1 x 1 x 64] -> [32 x 32 x 64 x *]
Validating --> conv1.y = RectifiedLinear (conv1.p) : [32 x 32 x 64 x *] -> [32 x 32 x 64 x *]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> conv2.c = Convolution (conv2.W, pool1) : [64 x 1600], [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> conv2.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv2.p = Plus (conv2.c, conv2.b) : [15 x 15 x 64 x *], [1 x 1 x 64] -> [15 x 15 x 64 x *]
Validating --> conv2.y = RectifiedLinear (conv2.p) : [15 x 15 x 64 x *] -> [15 x 15 x 64 x *]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.c = Convolution (conv3.W, pool2) : [3136 x 576], [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv3.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3.p = Plus (conv3.c, conv3.b) : [7 x 7 x 64 x *], [1 x 1 x 64] -> [7 x 7 x 64 x *]
Validating --> conv3.y = RectifiedLinear (conv3.p) : [7 x 7 x 64 x *] -> [7 x 7 x 64 x *]
Validating --> conv4.c = Convolution (conv4.W, conv3.y) : [1568 x 576], [7 x 7 x 64 x *] -> [7 x 7 x 32 x *]
Validating --> conv4.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv4.p = Plus (conv4.c, conv4.b) : [7 x 7 x 32 x *], [1 x 1 x 32] -> [7 x 7 x 32 x *]
Validating --> conv4.y = RectifiedLinear (conv4.p) : [7 x 7 x 32 x *] -> [7 x 7 x 32 x *]
Validating --> OutputNodes.t = Times (OutputNodes.W, conv4.y) : [10 x 7 x 7 x 32], [7 x 7 x 32 x *] -> [10 x *]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *], [10] -> [10 x *]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *], [10 x *] -> [1]

Validating network. 19 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 5 x 5 x 3, Map: 1 x 1 x 64, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 5 x 5 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 32, Kernel: 3 x 3 x 64, Map: 32, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.


13 out of 32 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/28/2016 17:03:46: Created model with 32 nodes on GPU 0.

04/28/2016 17:03:46: Training criterion node(s):
04/28/2016 17:03:46: 	CE = CrossEntropyWithSoftmax

04/28/2016 17:03:46: Evaluation criterion node(s):

04/28/2016 17:03:46: 	Err = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[Err Gradient[1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *]] [features Gradient[32 x 32 x 3 x *]] [labels Gradient[10 x *]] }
000000DD2A61FD50: {[features Value[32 x 32 x 3 x *]] }
000000DD3F858AD0: {[OutputNodes.W Value[10 x 7 x 7 x 32]] }
000000DD3F858CB0: {[conv2.b Value[1 x 1 x 64]] }
000000DD3F858D50: {[conv4.b Value[1 x 1 x 32]] }
000000DD3F858F30: {[conv1.b Value[1 x 1 x 64]] }
000000DD3F859250: {[conv3.b Value[1 x 1 x 64]] }
000000DD3F859750: {[OutputNodes.b Value[10]] }
000000DD3F8599D0: {[conv3.W Value[3136 x 576]] }
000000DD3F859A70: {[conv2.W Value[64 x 1600]] }
000000DD3F859D90: {[conv4.W Value[1568 x 576]] }
000000DD3F85A0B0: {[labels Value[10 x *]] }
000000DD3F85A470: {[featOffs Value[1 x 1]] }
000000DD3F85A5B0: {[conv1.W Value[64 x 75]] }
000000DD46E0BC00: {[conv3.p Gradient[7 x 7 x 64 x *]] [pool2 Gradient[7 x 7 x 64 x *]] }
000000DD46E0BF20: {[conv2.W Gradient[64 x 1600]] [conv2.p Value[15 x 15 x 64 x *]] }
000000DD46E0C060: {[OutputNodes.b Gradient[10]] }
000000DD46E0C240: {[conv4.c Value[7 x 7 x 32 x *]] }
000000DD46E0C4C0: {[conv3.c Value[7 x 7 x 64 x *]] }
000000DD46E0C560: {[OutputNodes.t Gradient[10 x *]] }
000000DD46E0C600: {[conv3.c Gradient[7 x 7 x 64 x *]] [conv3.y Value[7 x 7 x 64 x *]] }
000000DD46E0C6A0: {[conv2.c Gradient[15 x 15 x 64 x *]] [conv2.y Value[15 x 15 x 64 x *]] }
000000DD46E0C880: {[conv2.p Gradient[15 x 15 x 64 x *]] [pool1 Gradient[15 x 15 x 64 x *]] [pool2 Value[7 x 7 x 64 x *]] }
000000DD46E0CBA0: {[conv3.W Gradient[3136 x 576]] [conv3.p Value[7 x 7 x 64 x *]] }
000000DD46E0CC40: {[conv4.W Gradient[1568 x 576]] [conv4.p Value[7 x 7 x 32 x *]] }
000000DD46E0D5A0: {[OutputNodes.W Gradient[10 x 7 x 7 x 32]] [OutputNodes.z Value[10 x *]] }
000000DD46E0D780: {[OutputNodes.t Value[10 x *]] [conv3.b Gradient[1 x 1 x 64]] [conv3.y Gradient[7 x 7 x 64 x *]] [conv4.p Gradient[7 x 7 x 32 x *]] }
000000DD46E0D820: {[Err Value[1]] }
000000DD46E0DD20: {[OutputNodes.z Gradient[10 x *]] [conv4.b Gradient[1 x 1 x 32]] [conv4.y Gradient[7 x 7 x 32 x *]] }
000000DD46E0DF00: {[conv4.c Gradient[7 x 7 x 32 x *]] [conv4.y Value[7 x 7 x 32 x *]] }
000000DD46E0DFA0: {[CE Value[1]] }
000000DD46E0E040: {[CE Gradient[1]] }
000000DD46E0E0E0: {[conv2.b Gradient[1 x 1 x 64]] [conv2.y Gradient[15 x 15 x 64 x *]] }
000000DD46E0E7C0: {[featScaled Value[32 x 32 x 3 x *]] }
000000DD46E0E860: {[conv1.c Value[32 x 32 x 64 x *]] }
000000DD46E0EAE0: {[conv1.W Gradient[64 x 75]] [conv1.p Value[32 x 32 x 64 x *]] }
000000DD46E0F080: {[conv1.c Gradient[32 x 32 x 64 x *]] [conv1.y Value[32 x 32 x 64 x *]] }
000000DD46E0F120: {[conv2.c Value[15 x 15 x 64 x *]] }
000000DD46E0F440: {[conv1.b Gradient[1 x 1 x 64]] [conv1.y Gradient[32 x 32 x 64 x *]] }
000000DD46E0F760: {[conv1.p Gradient[32 x 32 x 64 x *]] [pool1 Value[15 x 15 x 64 x *]] }

04/28/2016 17:03:46: No PreCompute nodes found, skipping PreCompute step.

04/28/2016 17:03:46: Starting Epoch 1: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples

04/28/2016 17:03:46: Starting minibatch loop.
04/28/2016 17:03:57: Finished Epoch[ 1 of 5]: [Training Set] TrainLossPerSample = 2.3025996; TotalSamplesSeen = 100; EvalErrPerSample = 0.92; AvgLearningRatePerSample = 0.00015625; EpochTime=10.35
04/28/2016 17:03:57: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.1'

04/28/2016 17:03:57: Starting Epoch 2: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples

04/28/2016 17:03:57: Starting minibatch loop.
04/28/2016 17:04:00: Finished Epoch[ 2 of 5]: [Training Set] TrainLossPerSample = 2.3025945; TotalSamplesSeen = 200; EvalErrPerSample = 0.88; AvgLearningRatePerSample = 0.00015625; EpochTime=3.16776
04/28/2016 17:04:00: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.2'

04/28/2016 17:04:00: Starting Epoch 3: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples

04/28/2016 17:04:00: Starting minibatch loop.
04/28/2016 17:04:04: Finished Epoch[ 3 of 5]: [Training Set] TrainLossPerSample = 2.3025955; TotalSamplesSeen = 300; EvalErrPerSample = 0.88; AvgLearningRatePerSample = 0.00015625; EpochTime=3.17081
04/28/2016 17:04:04: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.3'

04/28/2016 17:04:04: Starting Epoch 4: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples

04/28/2016 17:04:04: Starting minibatch loop.
04/28/2016 17:04:07: Finished Epoch[ 4 of 5]: [Training Set] TrainLossPerSample = 2.3025621; TotalSamplesSeen = 400; EvalErrPerSample = 0.92; AvgLearningRatePerSample = 0.00015625; EpochTime=3.1594
04/28/2016 17:04:07: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal.4'

04/28/2016 17:04:08: Starting Epoch 5: learning rate per sample = 0.000156  effective momentum = 0.900000  momentum as time constant = 607.4 samples

04/28/2016 17:04:08: Starting minibatch loop.
04/28/2016 17:04:11: Finished Epoch[ 5 of 5]: [Training Set] TrainLossPerSample = 2.3025705; TotalSamplesSeen = 500; EvalErrPerSample = 0.93; AvgLearningRatePerSample = 0.00015625; EpochTime=3.16941
04/28/2016 17:04:11: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160428180341.58228\CNTKTextFormatReader\Examples\Image\Miscellaneous\CIFAR-10_05_ConvLocal@release_gpu/Models/05_ConvLocal'
04/28/2016 17:04:11: CNTKCommandTrainEnd: Train

04/28/2016 17:04:11: Action "train" complete.


04/28/2016 17:04:11: ##############################################################################
04/28/2016 17:04:11: #                                                                            #
04/28/2016 17:04:11: # Action "test"                                                              #
04/28/2016 17:04:11: #                                                                            #
04/28/2016 17:04:11: ##############################################################################


Post-processing network...

3 roots:
	CE = CrossEntropyWithSoftmax()
	Err = ErrorPrediction()
	OutputNodes.z = Plus()

Validating network. 32 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> OutputNodes.W = LearnableParameter() :  -> [10 x 7 x 7 x 32]
Validating --> conv4.W = LearnableParameter() :  -> [1568 x 576]
Validating --> conv3.W = LearnableParameter() :  -> [3136 x 576]
Validating --> conv2.W = LearnableParameter() :  -> [64 x 1600]
Validating --> conv1.W = LearnableParameter() :  -> [64 x 75]
Validating --> features = InputValue() :  -> [32 x 32 x 3 x *1]
Validating --> featOffs = LearnableParameter() :  -> [1 x 1]
Validating --> featScaled = Minus (features, featOffs) : [32 x 32 x 3 x *1], [1 x 1] -> [32 x 32 x 3 x *1]
Validating --> conv1.c = Convolution (conv1.W, featScaled) : [64 x 75], [32 x 32 x 3 x *1] -> [32 x 32 x 64 x *1]
Validating --> conv1.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv1.p = Plus (conv1.c, conv1.b) : [32 x 32 x 64 x *1], [1 x 1 x 64] -> [32 x 32 x 64 x *1]
Validating --> conv1.y = RectifiedLinear (conv1.p) : [32 x 32 x 64 x *1] -> [32 x 32 x 64 x *1]
Validating --> pool1 = MaxPooling (conv1.y) : [32 x 32 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> conv2.c = Convolution (conv2.W, pool1) : [64 x 1600], [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> conv2.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv2.p = Plus (conv2.c, conv2.b) : [15 x 15 x 64 x *1], [1 x 1 x 64] -> [15 x 15 x 64 x *1]
Validating --> conv2.y = RectifiedLinear (conv2.p) : [15 x 15 x 64 x *1] -> [15 x 15 x 64 x *1]
Validating --> pool2 = MaxPooling (conv2.y) : [15 x 15 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.c = Convolution (conv3.W, pool2) : [3136 x 576], [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv3.b = LearnableParameter() :  -> [1 x 1 x 64]
Validating --> conv3.p = Plus (conv3.c, conv3.b) : [7 x 7 x 64 x *1], [1 x 1 x 64] -> [7 x 7 x 64 x *1]
Validating --> conv3.y = RectifiedLinear (conv3.p) : [7 x 7 x 64 x *1] -> [7 x 7 x 64 x *1]
Validating --> conv4.c = Convolution (conv4.W, conv3.y) : [1568 x 576], [7 x 7 x 64 x *1] -> [7 x 7 x 32 x *1]
Validating --> conv4.b = LearnableParameter() :  -> [1 x 1 x 32]
Validating --> conv4.p = Plus (conv4.c, conv4.b) : [7 x 7 x 32 x *1], [1 x 1 x 32] -> [7 x 7 x 32 x *1]
Validating --> conv4.y = RectifiedLinear (conv4.p) : [7 x 7 x 32 x *1] -> [7 x 7 x 32 x *1]
Validating --> OutputNodes.t = Times (OutputNodes.W, conv4.y) : [10 x 7 x 7 x 32], [7 x 7 x 32 x *1] -> [10 x *1]
Validating --> OutputNodes.b = LearnableParameter() :  -> [10]
Validating --> OutputNodes.z = Plus (OutputNodes.t, OutputNodes.b) : [10 x *1], [10] -> [10 x *1]
Validating --> CE = CrossEntropyWithSoftmax (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]
Validating --> Err = ErrorPrediction (labels, OutputNodes.z) : [10 x *1], [10 x *1] -> [1]

Validating network. 19 nodes to process in pass 2.


Validating network, final pass.


Using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 64, Kernel: 5 x 5 x 3, Map: 1 x 1 x 64, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 32 x 32 x 64, Output: 15 x 15 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 15 x 15 x 64, Kernel: 5 x 5 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using cuDNN convolution engine for geometry: Input: 15 x 15 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 64, Kernel: 3 x 3 x 64, Map: 64, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.

Using reference convolution engine for geometry: Input: 7 x 7 x 64, Output: 7 x 7 x 32, Kernel: 3 x 3 x 64, Map: 32, Stride: 1 x 1 x 64, Sharing: (0, 0, 0), AutoPad: (1), LowerPad: 0, UpperPad: 0.


13 out of 32 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[CE Gradient[1]] [Err Gradient[1]] [OutputNodes.W Gradient[10 x 7 x 7 x 32]] [OutputNodes.b Gradient[10]] [OutputNodes.t Gradient[10 x *1]] [OutputNodes.z Gradient[10 x *1]] [conv1.W Gradient[64 x 75]] [conv1.b Gradient[1 x 1 x 64]] [conv1.c Gradient[32 x 32 x 64 x *1]] [conv1.p Gradient[32 x 32 x 64 x *1]] [conv1.y Gradient[32 x 32 x 64 x *1]] [conv2.W Gradient[64 x 1600]] [conv2.b Gradient[1 x 1 x 64]] [conv2.c Gradient[15 x 15 x 64 x *1]] [conv2.p Gradient[15 x 15 x 64 x *1]] [conv2.y Gradient[15 x 15 x 64 x *1]] [conv3.W Gradient[3136 x 576]] [conv3.b Gradient[1 x 1 x 64]] [conv3.c Gradient[7 x 7 x 64 x *1]] [conv3.p Gradient[7 x 7 x 64 x *1]] [conv3.y Gradient[7 x 7 x 64 x *1]] [conv4.W Gradient[1568 x 576]] [conv4.b Gradient[1 x 1 x 32]] [conv4.c Gradient[7 x 7 x 32 x *1]] [conv4.p Gradient[7 x 7 x 32 x *1]] [conv4.y Gradient[7 x 7 x 32 x *1]] [featOffs Gradient[1 x 1]] [featScaled Gradient[32 x 32 x 3 x *1]] [features Gradient[32 x 32 x 3 x *1]] [labels Gradient[10 x *1]] [pool1 Gradient[15 x 15 x 64 x *1]] [pool2 Gradient[7 x 7 x 64 x *1]] }
000000DD78DD8CF0: {[conv1.b Value[1 x 1 x 64]] }
000000DD78DD8F70: {[labels Value[10 x *1]] }
000000DD78DD9150: {[conv1.p Value[32 x 32 x 64 x *1]] }
000000DD78DD91F0: {[conv4.b Value[1 x 1 x 32]] }
000000DD78DD96F0: {[conv4.W Value[1568 x 576]] }
000000DD78DD98D0: {[conv2.b Value[1 x 1 x 64]] }
000000DD78DD9A10: {[features Value[32 x 32 x 3 x *1]] }
000000DD78DD9BF0: {[conv1.c Value[32 x 32 x 64 x *1]] }
000000DD78DDA230: {[OutputNodes.b Value[10]] }
000000DD78DDA370: {[conv2.W Value[64 x 1600]] }
000000DD78DDA690: {[conv3.W Value[3136 x 576]] }
000000DD78DDAA50: {[conv3.b Value[1 x 1 x 64]] }
000000DD78DDAEB0: {[featOffs Value[1 x 1]] }
000000DD78DDB090: {[OutputNodes.W Value[10 x 7 x 7 x 32]] }
000000DD78DDB130: {[featScaled Value[32 x 32 x 3 x *1]] }
000000DD78DDB1D0: {[conv1.y Value[32 x 32 x 64 x *1]] }
000000DD78DDB310: {[conv1.W Value[64 x 75]] }
000000DD78DDB450: {[pool2 Value[7 x 7 x 64 x *1]] }
000000DD78DDB4F0: {[conv4.p Value[7 x 7 x 32 x *1]] }
000000DD78DDB6D0: {[conv2.p Value[15 x 15 x 64 x *1]] }
000000DD78DDB770: {[conv3.p Value[7 x 7 x 64 x *1]] }
000000DD78DDB810: {[conv2.y Value[15 x 15 x 64 x *1]] }
000000DD78DDB8B0: {[pool1 Value[15 x 15 x 64 x *1]] }
000000DD78DDB950: {[conv2.c Value[15 x 15 x 64 x *1]] }
000000DD78DDBBD0: {[CE Value[1]] }
000000DD78DDBDB0: {[OutputNodes.z Value[10 x *1]] }
000000DD78DDBE50: {[conv4.c Value[7 x 7 x 32 x *1]] }
000000DD78DDBF90: {[conv3.c Value[7 x 7 x 64 x *1]] }
000000DD78DDC170: {[OutputNodes.t Value[10 x *1]] }
000000DD78DDC3F0: {[conv4.y Value[7 x 7 x 32 x *1]] }
000000DD78DDC990: {[conv3.y Value[7 x 7 x 64 x *1]] }
000000DD78DDCA30: {[Err Value[1]] }

Final Results: Minibatch[1-625]: SamplesSeen = 10000    Err: ErrorPrediction/Sample = 0.8561    CE: CrossEntropyWithSoftmax/Sample = 2.3025067    Perplexity = 9.9992158    

04/28/2016 17:05:11: Action "test" complete.

04/28/2016 17:05:11: __COMPLETED__