=== Running /home/alrezni/src/cntk_git/build/release/bin/cntk configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/MultiGpu/../Config/Multigpu.cntk currentDirectory=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data RunDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu DataDir=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/MultiGpu/../Config OutputDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu DeviceId=0 timestamping=true Multigpu_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Apr 26 2016 17:04:28
		Last modified date: Tue Apr  5 16:01:37 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: alrezni/examples_text
		Build SHA1: 780d0d14f555f568d393793562f374f04af79a73
		Built by alrezni on atleneu04
		Build Path: /home/alrezni/src/cntk_git
-------------------------------------------------------------------
Changed current directory to /home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 1 nodes pinging each other
ping [requestnodes (before change)]: all 1 nodes responded
requestnodes [MPIWrapper]: using 1 out of 1 MPI nodes (1 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 1 nodes pinging each other
ping [requestnodes (after change)]: all 1 nodes responded
mpihelper: only one MPI process: MPI operation will be boring
ping [mpihelper]: 1 nodes pinging each other
ping [mpihelper]: all 1 nodes responded
04/26/2016 17:09:49: -------------------------------------------------------------------
04/26/2016 17:09:49: Build info: 

04/26/2016 17:09:49: 		Built time: Apr 26 2016 17:04:28
04/26/2016 17:09:49: 		Last modified date: Tue Apr  5 16:01:37 2016
04/26/2016 17:09:49: 		Build type: release
04/26/2016 17:09:49: 		Build target: GPU
04/26/2016 17:09:49: 		With 1bit-SGD: yes
04/26/2016 17:09:49: 		Math lib: acml
04/26/2016 17:09:49: 		CUDA_PATH: /usr/local/cuda-7.0
04/26/2016 17:09:49: 		CUB_PATH: /usr/local/cub-1.4.1
04/26/2016 17:09:49: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/26/2016 17:09:49: 		Build Branch: alrezni/examples_text
04/26/2016 17:09:49: 		Build SHA1: 780d0d14f555f568d393793562f374f04af79a73
04/26/2016 17:09:49: 		Built by alrezni on atleneu04
04/26/2016 17:09:49: 		Build Path: /home/alrezni/src/cntk_git
04/26/2016 17:09:49: -------------------------------------------------------------------

04/26/2016 17:09:49: Running on localhost at 2016/04/26 17:09:49
04/26/2016 17:09:49: Command line: 
/home/alrezni/src/cntk_git/build/release/bin/cntk  configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/MultiGpu/../Config/Multigpu.cntk  currentDirectory=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data  RunDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu  DataDir=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data  ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/MultiGpu/../Config  OutputDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu  DeviceId=0  timestamping=true  Multigpu_Demo_Train=[SGD=[maxEpochs=3]]



04/26/2016 17:09:49: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/26/2016 17:09:49: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "$OutputDir$/MultigpuOutput"    
]
currentDirectory=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu
DataDir=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/MultiGpu/../Config
OutputDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu
DeviceId=0
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

04/26/2016 17:09:49: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/26/2016 17:09:49: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/26/2016 17:09:49: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu/MultigpuOutput"    
]
currentDirectory=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu
DataDir=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/MultiGpu/../Config
OutputDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu
DeviceId=0
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

04/26/2016 17:09:49: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/26/2016 17:09:49: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Multigpu.cntk:command=Multigpu_Demo_Train:Multigpu_Demo_Test
configparameters: Multigpu.cntk:ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/MultiGpu/../Config
configparameters: Multigpu.cntk:currentDirectory=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:DataDir=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
configparameters: Multigpu.cntk:deviceId=0
configparameters: Multigpu.cntk:ModelDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu/Models
configparameters: Multigpu.cntk:modelPath=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn
configparameters: Multigpu.cntk:Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu/MultigpuOutput"    
]

configparameters: Multigpu.cntk:Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Multigpu.cntk:Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Multigpu.cntk:OutputDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu
configparameters: Multigpu.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Multigpu.cntk:parallelTrain=true
configparameters: Multigpu.cntk:precision=float
configparameters: Multigpu.cntk:RootDir=..
configparameters: Multigpu.cntk:RunDir=/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu
configparameters: Multigpu.cntk:timestamping=true
configparameters: Multigpu.cntk:traceLevel=1
04/26/2016 17:09:49: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/26/2016 17:09:49: Commands: Multigpu_Demo_Train Multigpu_Demo_Test
04/26/2016 17:09:49: Precision = "float"
04/26/2016 17:09:49: CNTKModelPath: /tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn
04/26/2016 17:09:49: CNTKCommandTrainInfo: Multigpu_Demo_Train : 3
04/26/2016 17:09:49: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/26/2016 17:09:49: ##############################################################################
04/26/2016 17:09:49: #                                                                            #
04/26/2016 17:09:49: # Action "train"                                                             #
04/26/2016 17:09:49: #                                                                            #
04/26/2016 17:09:49: ##############################################################################

04/26/2016 17:09:49: CNTKCommandTrainBegin: Multigpu_Demo_Train
SimpleNetworkBuilder Using GPU 0

04/26/2016 17:09:49: Creating virgin network.
SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/26/2016 17:09:50: Created model with 25 nodes on GPU 0.

04/26/2016 17:09:50: Training criterion node(s):
04/26/2016 17:09:50: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/26/2016 17:09:50: Evaluation criterion node(s):

04/26/2016 17:09:50: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0x1323398: {[features Value[2 x *]] }
0x1f01b18: {[W0 Value[50 x 2]] }
0x1f0f868: {[MeanOfFeatures Value[2]] }
0x1f0fd08: {[InvStdOfFeatures Value[2]] }
0x267d598: {[B0 Value[50 x 1]] }
0x267f788: {[W1 Value[50 x 50]] }
0x2b465e8: {[B1 Value[50 x 1]] }
0x2b47af8: {[W2 Value[2 x 50]] }
0x2b481c8: {[B2 Value[2 x 1]] }
0x2b49408: {[labels Value[2 x *]] }
0x2b4a648: {[Prior Value[2]] }
0x2b50698: {[LogOfPrior Value[2]] }
0x2b510f8: {[EvalErrorPrediction Value[1]] }
0x2b52688: {[MVNormalizedFeatures Value[2 x *]] }
0x2b529a8: {[W0*features Value[50 x *]] }
0x2b52b08: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0x2b52c68: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0x2b52e28: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0x2b52fe8: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0x2b531a8: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0x2b53368: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0x2b53528: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0x2b536e8: {[CrossEntropyWithSoftmax Value[1]] }
0x2b54468: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0x2b54628: {[CrossEntropyWithSoftmax Gradient[1]] }
0x2b547e8: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0x2b549a8: {[W2*H1 Gradient[2 x 1 x *]] }
0x2b54b68: {[B2 Gradient[2 x 1]] }


04/26/2016 17:09:50: Precomputing --> 3 PreCompute nodes found.

04/26/2016 17:09:50: 	MeanOfFeatures = Mean()
04/26/2016 17:09:50: 	InvStdOfFeatures = InvStdDev()
04/26/2016 17:09:50: 	Prior = Mean()

04/26/2016 17:09:50: Precomputing --> Completed.


04/26/2016 17:09:50: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples

04/26/2016 17:09:50: Starting minibatch loop.
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.70004456; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0063s; SamplesPerSecond = 39872.4
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.70309900; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0053s; SamplesPerSecond = 47321.6
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.70606104; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0053s; SamplesPerSecond = 47384.4
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.69845532; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0052s; SamplesPerSecond = 47856.0
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.73496533; EvalErr[0]PerSample = 0.57600000; TotalTime = 0.0053s; SamplesPerSecond = 47411.3
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.72522827; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0053s; SamplesPerSecond = 47250.0
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.73287500; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0053s; SamplesPerSecond = 47429.3
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.70135547; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0052s; SamplesPerSecond = 47637.2
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.72466504; EvalErr[0]PerSample = 0.46000000; TotalTime = 0.0053s; SamplesPerSecond = 47474.4
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.72187500; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0053s; SamplesPerSecond = 47519.5
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.69799023; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0052s; SamplesPerSecond = 47846.9
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.70696387; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0053s; SamplesPerSecond = 47600.9
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.69863965; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0052s; SamplesPerSecond = 47691.7
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.71772461; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0052s; SamplesPerSecond = 47901.9
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.69526270; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0052s; SamplesPerSecond = 48049.2
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.71436426; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0052s; SamplesPerSecond = 47901.9
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.70399316; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0052s; SamplesPerSecond = 47628.1
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.71745508; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0064s; SamplesPerSecond = 38965.1
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.71963184; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0052s; SamplesPerSecond = 47664.4
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.70689941; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0053s; SamplesPerSecond = 47411.3
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.70425098; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0052s; SamplesPerSecond = 48095.4
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.70622754; EvalErr[0]PerSample = 0.45200000; TotalTime = 0.0052s; SamplesPerSecond = 47892.7
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.69729492; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0053s; SamplesPerSecond = 47420.3
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.75974219; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0052s; SamplesPerSecond = 48113.9
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.70631250; EvalErr[0]PerSample = 0.43600000; TotalTime = 0.0052s; SamplesPerSecond = 47782.9
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.70705664; EvalErr[0]PerSample = 0.46400000; TotalTime = 0.0052s; SamplesPerSecond = 47874.4
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.72660352; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0052s; SamplesPerSecond = 48040.0
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.71369727; EvalErr[0]PerSample = 0.55600000; TotalTime = 0.0052s; SamplesPerSecond = 47755.5
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.68916602; EvalErr[0]PerSample = 0.47200000; TotalTime = 0.0052s; SamplesPerSecond = 47755.5
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69964844; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0053s; SamplesPerSecond = 47241.1
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.69387891; EvalErr[0]PerSample = 0.46000000; TotalTime = 0.0052s; SamplesPerSecond = 48095.4
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.68885742; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0052s; SamplesPerSecond = 47673.5
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.69388867; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0052s; SamplesPerSecond = 47801.1
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.70363867; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0051s; SamplesPerSecond = 48685.5
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.65449219; EvalErr[0]PerSample = 0.44400000; TotalTime = 0.0051s; SamplesPerSecond = 49135.2
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.64607031; EvalErr[0]PerSample = 0.46000000; TotalTime = 0.0051s; SamplesPerSecond = 49222.3
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.59492969; EvalErr[0]PerSample = 0.12400000; TotalTime = 0.0049s; SamplesPerSecond = 51030.8
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.53965820; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0049s; SamplesPerSecond = 50854.4
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.43681445; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0048s; SamplesPerSecond = 52279.4
04/26/2016 17:09:50:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.37407422; EvalErr[0]PerSample = 0.12000000; TotalTime = 0.0046s; SamplesPerSecond = 53832.9
04/26/2016 17:09:50: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 0.68409629; TotalSamplesSeen = 10000; EvalErrPerSample = 0.4578; AvgLearningRatePerSample = 0.02; EpochTime=0.213415
04/26/2016 17:09:50: SGD: Saving checkpoint model '/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn.1'

04/26/2016 17:09:50: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples

04/26/2016 17:09:50: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.27919647; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0087s; SamplesPerSecond = 28682.9
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.24468611; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0075s; SamplesPerSecond = 33489.6
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19639892; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0074s; SamplesPerSecond = 33770.1
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16397861; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0073s; SamplesPerSecond = 34120.4
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19745002; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0074s; SamplesPerSecond = 33879.9
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19548896; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0074s; SamplesPerSecond = 33811.2
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18230148; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0084s; SamplesPerSecond = 29800.9
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17531255; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0073s; SamplesPerSecond = 34153.0
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20166559; EvalErr[0]PerSample = 0.10800000; TotalTime = 0.0074s; SamplesPerSecond = 33958.2
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19749058; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0073s; SamplesPerSecond = 34157.7
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13463336; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0073s; SamplesPerSecond = 34046.0
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19006259; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0073s; SamplesPerSecond = 34397.4
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12234776; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0073s; SamplesPerSecond = 34307.7
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16962922; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34139.0
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16091639; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0073s; SamplesPerSecond = 34153.0
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18624030; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34050.7
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18465726; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0073s; SamplesPerSecond = 34312.4
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18514518; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0073s; SamplesPerSecond = 34218.5
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20127224; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0073s; SamplesPerSecond = 34032.1
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13418547; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0074s; SamplesPerSecond = 33939.7
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13995001; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0073s; SamplesPerSecond = 34148.3
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15602538; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0073s; SamplesPerSecond = 34092.5
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15448171; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34120.4
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14780067; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0074s; SamplesPerSecond = 33783.8
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12361633; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0073s; SamplesPerSecond = 34326.5
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14079766; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34153.0
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12624363; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0073s; SamplesPerSecond = 34227.8
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18913222; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34162.3
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17952681; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0073s; SamplesPerSecond = 34232.5
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18825452; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0073s; SamplesPerSecond = 34331.2
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17517656; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0073s; SamplesPerSecond = 34473.2
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14744161; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34083.2
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13888184; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0073s; SamplesPerSecond = 34069.2
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14156678; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0073s; SamplesPerSecond = 34143.7
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13990591; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0074s; SamplesPerSecond = 33788.3
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15059729; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0073s; SamplesPerSecond = 34106.4
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14720846; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0073s; SamplesPerSecond = 34406.8
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13021243; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0073s; SamplesPerSecond = 34185.7
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19704037; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0073s; SamplesPerSecond = 34185.7
04/26/2016 17:09:50:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15858146; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0073s; SamplesPerSecond = 34256.0
04/26/2016 17:09:50: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 0.16938752; TotalSamplesSeen = 20000; EvalErrPerSample = 0.0743; AvgLearningRatePerSample = 0.0080000004; EpochTime=0.297533
04/26/2016 17:09:50: SGD: Saving checkpoint model '/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn.2'

04/26/2016 17:09:50: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples

04/26/2016 17:09:50: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18888809; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0075s; SamplesPerSecond = 33422.5
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14084978; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0073s; SamplesPerSecond = 34055.3
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14561895; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0074s; SamplesPerSecond = 33985.9
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13238169; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0073s; SamplesPerSecond = 34087.8
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17465335; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0073s; SamplesPerSecond = 34101.8
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17752616; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0073s; SamplesPerSecond = 34359.5
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15030556; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0074s; SamplesPerSecond = 33674.6
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17118019; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0073s; SamplesPerSecond = 34064.6
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.10379908; EvalErr[0]PerSample = 0.04000000; TotalTime = 0.0073s; SamplesPerSecond = 34106.4
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20636150; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0073s; SamplesPerSecond = 34139.0
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16606704; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0074s; SamplesPerSecond = 33985.9
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14937580; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0074s; SamplesPerSecond = 33889.1
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19161901; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0073s; SamplesPerSecond = 34190.4
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13684752; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0073s; SamplesPerSecond = 34055.3
04/26/2016 17:09:50:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.21095939; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0074s; SamplesPerSecond = 33967.4
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13216461; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0073s; SamplesPerSecond = 34251.3
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17341094; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0073s; SamplesPerSecond = 34106.4
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16532641; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0073s; SamplesPerSecond = 34397.4
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14614740; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0073s; SamplesPerSecond = 34227.8
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12551177; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0073s; SamplesPerSecond = 34185.7
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13419939; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34153.0
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17050096; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0073s; SamplesPerSecond = 34176.3
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.22579789; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0073s; SamplesPerSecond = 34078.5
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18219666; EvalErr[0]PerSample = 0.10800000; TotalTime = 0.0073s; SamplesPerSecond = 34209.1
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20347898; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34354.8
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.22972656; EvalErr[0]PerSample = 0.12000000; TotalTime = 0.0073s; SamplesPerSecond = 34087.8
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12621914; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0073s; SamplesPerSecond = 34115.7
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15674728; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0074s; SamplesPerSecond = 33981.2
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11517532; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0074s; SamplesPerSecond = 33990.5
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14187870; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34064.6
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18496784; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0073s; SamplesPerSecond = 34392.6
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15026403; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0073s; SamplesPerSecond = 34185.7
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12862609; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34059.9
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17651362; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0074s; SamplesPerSecond = 33916.7
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14975908; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0073s; SamplesPerSecond = 34153.0
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.11465866; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0073s; SamplesPerSecond = 34181.0
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16513610; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0073s; SamplesPerSecond = 34157.7
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14972374; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0073s; SamplesPerSecond = 34134.4
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15995582; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0073s; SamplesPerSecond = 34069.2
04/26/2016 17:09:51:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17898927; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0073s; SamplesPerSecond = 34185.7
04/26/2016 17:09:51: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 0.16083773; TotalSamplesSeen = 30000; EvalErrPerSample = 0.0776; AvgLearningRatePerSample = 0.0080000004; EpochTime=0.29559
04/26/2016 17:09:51: SGD: Saving checkpoint model '/tmp/cntk-test-20160426170941.800703/CNTKTextFormatReader/Examples/Other/Simple2d_MultiGpu@release_gpu/Models/multigpu.dnn'
04/26/2016 17:09:51: CNTKCommandTrainEnd: Multigpu_Demo_Train

04/26/2016 17:09:51: Action "train" complete.


04/26/2016 17:09:51: ##############################################################################
04/26/2016 17:09:51: #                                                                            #
04/26/2016 17:09:51: # Action "test"                                                              #
04/26/2016 17:09:51: #                                                                            #
04/26/2016 17:09:51: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0x12a02b8: {[Prior Value[2]] }
0x16105e8: {[B2 Value[2 x 1]] }
0x267d598: {[B1 Value[50 x 1]] }
0x2b49de8: {[B0 Value[50 x 1]] }
0x2b4a488: {[MVNormalizedFeatures Value[2 x *1]] }
0x2b4a838: {[W0*features Value[50 x *1]] }
0x2b4a9f8: {[W0*features+B0 Value[50 x 1 x *1]] }
0x2b4abb8: {[H1 Value[50 x 1 x *1]] }
0x2b4ad78: {[W1*H1 Value[50 x 1 x *1]] }
0x2b4af38: {[W1*H1+B1 Value[50 x 1 x *1]] }
0x2b4b0f8: {[H2 Value[50 x 1 x *1]] }
0x2b4b2b8: {[W2*H1 Value[2 x 1 x *1]] }
0x2b4b478: {[HLast Value[2 x 1 x *1]] }
0x2b50f28: {[MeanOfFeatures Value[2]] }
0x2b525e8: {[CrossEntropyWithSoftmax Value[1]] }
0x2b52af8: {[EvalErrorPrediction Value[1]] }
0x2b549c8: {[W2 Value[2 x 50]] }
0x2b55ae8: {[InvStdOfFeatures Value[2]] }
0x2b57108: {[LogOfPrior Value[2]] }
0x2b57bc8: {[W0 Value[50 x 2]] }
0x2b57c68: {[W1 Value[50 x 50]] }
0x6999948: {[labels Value[2 x *1]] }
0x699a368: {[features Value[2 x *1]] }

Final Results: Minibatch[1-1]: SamplesSeen = 603    EvalErrorPrediction: ErrorPrediction/Sample = 0.058043118    CrossEntropyWithSoftmax: CrossEntropyWithSoftmax/Sample = 0.12736577    Perplexity = 1.1358324    

04/26/2016 17:09:51: Action "test" complete.

04/26/2016 17:09:51: __COMPLETED__