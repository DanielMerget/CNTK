=== Running /cygdrive/c/src/cntk_github/x64/release/cntk.exe configFile=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Other\Simple2d\Config/Multigpu.cntk currentDirectory=C:\src\cntk_github\Examples\Other\Simple2d\Data RunDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu DataDir=C:\src\cntk_github\Examples\Other\Simple2d\Data ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Other\Simple2d\Config OutputDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu DeviceId=-1 timestamping=true Multigpu_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Apr 26 2016 17:54:13
		Last modified date: Thu Apr  7 11:05:47 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: E:\lib\cub-1.4.1
		CUDNN_PATH: E:\lib\cuDNN_v4
		Build Branch: alrezni/examples_text
		Build SHA1: bacd6681dae457fcc823f84c2e635d69134b1219 (modified)
		Built by alrezni on DIFFENG
		Build Path: C:\src\cntk_github\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\src\cntk_github\Examples\Other\Simple2d\Data
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 1 nodes pinging each other
ping [requestnodes (before change)]: all 1 nodes responded
requestnodes [MPIWrapper]: using 1 out of 1 MPI nodes (1 requested); we (0) are in (participating)
ping [requestnodes (after change)]: 1 nodes pinging each other
ping [requestnodes (after change)]: all 1 nodes responded
mpihelper: only one MPI process: MPI operation will be boring
ping [mpihelper]: 1 nodes pinging each other
ping [mpihelper]: all 1 nodes responded
04/26/2016 17:03:37: -------------------------------------------------------------------
04/26/2016 17:03:37: Build info: 

04/26/2016 17:03:37: 		Built time: Apr 26 2016 17:54:13
04/26/2016 17:03:37: 		Last modified date: Thu Apr  7 11:05:47 2016
04/26/2016 17:03:37: 		Build type: Release
04/26/2016 17:03:37: 		Build target: GPU
04/26/2016 17:03:37: 		With 1bit-SGD: yes
04/26/2016 17:03:37: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
04/26/2016 17:03:37: 		CUB_PATH: E:\lib\cub-1.4.1
04/26/2016 17:03:37: 		CUDNN_PATH: E:\lib\cuDNN_v4
04/26/2016 17:03:37: 		Build Branch: alrezni/examples_text
04/26/2016 17:03:37: 		Build SHA1: bacd6681dae457fcc823f84c2e635d69134b1219 (modified)
04/26/2016 17:03:37: 		Built by alrezni on DIFFENG
04/26/2016 17:03:37: 		Build Path: C:\src\cntk_github\Source\CNTK\
04/26/2016 17:03:37: -------------------------------------------------------------------

04/26/2016 17:03:37: Running on DIFFENG at 2016/04/26 17:03:37
04/26/2016 17:03:37: Command line: 
C:\src\cntk_github\x64\release\cntk.exe  configFile=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Other\Simple2d\Config/Multigpu.cntk  currentDirectory=C:\src\cntk_github\Examples\Other\Simple2d\Data  RunDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu  DataDir=C:\src\cntk_github\Examples\Other\Simple2d\Data  ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Other\Simple2d\Config  OutputDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu  DeviceId=-1  timestamping=true  Multigpu_Demo_Train=[SGD=[maxEpochs=3]]



04/26/2016 17:03:37: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/26/2016 17:03:37: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "$OutputDir$/MultigpuOutput"    
]
currentDirectory=C:\src\cntk_github\Examples\Other\Simple2d\Data
RunDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu
DataDir=C:\src\cntk_github\Examples\Other\Simple2d\Data
ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Other\Simple2d\Config
OutputDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu
DeviceId=-1
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

04/26/2016 17:03:37: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/26/2016 17:03:37: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/26/2016 17:03:37: RootDir = ".."
ConfigDir = "../Config"
DataDir = "../Data"
OutputDir = "../Output"
ModelDir = "E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu/Models"
deviceId = "auto"
command = Multigpu_Demo_Train:Multigpu_Demo_Test
precision = "float"
traceLevel = 1
modelPath = "E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn"
outputNodeNames = ScaledLogLikelihood
parallelTrain = true
Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\src\cntk_github\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\src\cntk_github\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\src\cntk_github\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu/MultigpuOutput"    
]
currentDirectory=C:\src\cntk_github\Examples\Other\Simple2d\Data
RunDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu
DataDir=C:\src\cntk_github\Examples\Other\Simple2d\Data
ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Other\Simple2d\Config
OutputDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu
DeviceId=-1
timestamping=true
Multigpu_Demo_Train=[SGD=[maxEpochs=3]]

04/26/2016 17:03:37: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/26/2016 17:03:37: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Multigpu.cntk:command=Multigpu_Demo_Train:Multigpu_Demo_Test
configparameters: Multigpu.cntk:ConfigDir=C:\src\cntk_github\Tests\EndToEndTests\CNTKTextFormatReader\Examples\Other\Simple2d\Config
configparameters: Multigpu.cntk:currentDirectory=C:\src\cntk_github\Examples\Other\Simple2d\Data
configparameters: Multigpu.cntk:DataDir=C:\src\cntk_github\Examples\Other\Simple2d\Data
configparameters: Multigpu.cntk:deviceId=-1
configparameters: Multigpu.cntk:ModelDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu/Models
configparameters: Multigpu.cntk:modelPath=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn
configparameters: Multigpu.cntk:Multigpu_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\src\cntk_github\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputPath = "E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu/MultigpuOutput"    
]

configparameters: Multigpu.cntk:Multigpu_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\src\cntk_github\Examples\Other\Simple2d\Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Multigpu.cntk:Multigpu_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
        parallelTrain = [
            parallelizationMethod = "DataParallelSGD"
            parallelizationStartEpoch = 2
            dataParallelSGD = [
                gradientBits = 1
            ]
        ]
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "C:\src\cntk_github\Examples\Other\Simple2d\Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Multigpu.cntk:OutputDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu
configparameters: Multigpu.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Multigpu.cntk:parallelTrain=true
configparameters: Multigpu.cntk:precision=float
configparameters: Multigpu.cntk:RootDir=..
configparameters: Multigpu.cntk:RunDir=E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu
configparameters: Multigpu.cntk:timestamping=true
configparameters: Multigpu.cntk:traceLevel=1
04/26/2016 17:03:37: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/26/2016 17:03:37: Commands: Multigpu_Demo_Train Multigpu_Demo_Test
04/26/2016 17:03:37: Precision = "float"
04/26/2016 17:03:37: CNTKModelPath: E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn
04/26/2016 17:03:37: CNTKCommandTrainInfo: Multigpu_Demo_Train : 3
04/26/2016 17:03:37: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/26/2016 17:03:37: ##############################################################################
04/26/2016 17:03:37: #                                                                            #
04/26/2016 17:03:37: # Action "train"                                                             #
04/26/2016 17:03:37: #                                                                            #
04/26/2016 17:03:37: ##############################################################################

04/26/2016 17:03:37: CNTKCommandTrainBegin: Multigpu_Demo_Train
SimpleNetworkBuilder Using CPU

04/26/2016 17:03:37: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/26/2016 17:03:37: Created model with 25 nodes on CPU.

04/26/2016 17:03:37: Training criterion node(s):
04/26/2016 17:03:37: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/26/2016 17:03:37: Evaluation criterion node(s):

04/26/2016 17:03:37: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
000000FF0BF00C80: {[W0 Value[50 x 2]] }
000000FF0BF00E60: {[B0 Value[50 x 1]] }
000000FF0BF01360: {[W1 Value[50 x 50]] }
000000FF0BF01540: {[MeanOfFeatures Value[2]] }
000000FF0BF01720: {[features Value[2 x *]] }
000000FF0BF017C0: {[InvStdOfFeatures Value[2]] }
000000FF0BFD91F0: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
000000FF0BFD9470: {[EvalErrorPrediction Value[1]] }
000000FF0BFD9650: {[Prior Value[2]] }
000000FF0BFD96F0: {[W0*features Value[50 x *]] }
000000FF0BFD9790: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
000000FF0BFD9970: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
000000FF0BFD9A10: {[CrossEntropyWithSoftmax Gradient[1]] }
000000FF0BFD9AB0: {[labels Value[2 x *]] }
000000FF0BFD9B50: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
000000FF0BFD9BF0: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
000000FF0BFD9C90: {[CrossEntropyWithSoftmax Value[1]] }
000000FF0BFD9F10: {[W2*H1 Gradient[2 x 1 x *]] }
000000FF0BFDA050: {[B2 Value[2 x 1]] }
000000FF0BFDA230: {[B2 Gradient[2 x 1]] }
000000FF0BFDA370: {[ScaledLogLikelihood Value[2 x 1 x *]] }
000000FF0BFDA690: {[LogOfPrior Value[2]] }
000000FF0BFDA730: {[B1 Value[50 x 1]] }
000000FF0BFDA870: {[MVNormalizedFeatures Value[2 x *]] }
000000FF0BFDA910: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
000000FF0BFDA9B0: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
000000FF0BFDAC30: {[W2 Value[2 x 50]] }
000000FF0BFDAFF0: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }


04/26/2016 17:03:37: Precomputing --> 3 PreCompute nodes found.

04/26/2016 17:03:37: 	MeanOfFeatures = Mean()
04/26/2016 17:03:37: 	InvStdOfFeatures = InvStdDev()
04/26/2016 17:03:37: 	Prior = Mean()

04/26/2016 17:03:37: Precomputing --> Completed.


04/26/2016 17:03:37: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples

04/26/2016 17:03:37: Starting minibatch loop.
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.70511987; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0370s; SamplesPerSecond = 6755.1
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.69754895; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0279s; SamplesPerSecond = 8969.3
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.71056921; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0283s; SamplesPerSecond = 8849.2
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.72951074; EvalErr[0]PerSample = 0.56000000; TotalTime = 0.0276s; SamplesPerSecond = 9059.3
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.70946655; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0285s; SamplesPerSecond = 8763.9
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.72656787; EvalErr[0]PerSample = 0.54400000; TotalTime = 0.0288s; SamplesPerSecond = 8683.6
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.69337402; EvalErr[0]PerSample = 0.43200000; TotalTime = 0.0280s; SamplesPerSecond = 8920.6
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.73605176; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0272s; SamplesPerSecond = 9190.5
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.71453076; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0263s; SamplesPerSecond = 9496.7
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.75191992; EvalErr[0]PerSample = 0.47200000; TotalTime = 0.0253s; SamplesPerSecond = 9889.6
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.75975146; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0262s; SamplesPerSecond = 9540.9
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.73172168; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0267s; SamplesPerSecond = 9348.6
04/26/2016 17:03:37:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.76840820; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0267s; SamplesPerSecond = 9346.8
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.70464746; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0239s; SamplesPerSecond = 10438.8
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.70557227; EvalErr[0]PerSample = 0.46400000; TotalTime = 0.0253s; SamplesPerSecond = 9864.3
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.72711816; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0258s; SamplesPerSecond = 9680.5
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.70076660; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0255s; SamplesPerSecond = 9812.8
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.69409766; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0239s; SamplesPerSecond = 10445.0
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.69139941; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0258s; SamplesPerSecond = 9695.9
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.73361621; EvalErr[0]PerSample = 0.55200000; TotalTime = 0.0260s; SamplesPerSecond = 9627.2
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.72225879; EvalErr[0]PerSample = 0.46800000; TotalTime = 0.0263s; SamplesPerSecond = 9507.1
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.70356348; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0268s; SamplesPerSecond = 9331.8
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.69928613; EvalErr[0]PerSample = 0.46400000; TotalTime = 0.0261s; SamplesPerSecond = 9568.6
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.72360938; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0257s; SamplesPerSecond = 9746.2
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.69871875; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0259s; SamplesPerSecond = 9666.3
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.69114844; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0260s; SamplesPerSecond = 9633.2
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.68648047; EvalErr[0]PerSample = 0.45600000; TotalTime = 0.0267s; SamplesPerSecond = 9375.9
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.69657227; EvalErr[0]PerSample = 0.46400000; TotalTime = 0.0249s; SamplesPerSecond = 10021.6
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.71585547; EvalErr[0]PerSample = 0.45200000; TotalTime = 0.0253s; SamplesPerSecond = 9865.8
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69730664; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0259s; SamplesPerSecond = 9668.6
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.70432422; EvalErr[0]PerSample = 0.53200000; TotalTime = 0.0260s; SamplesPerSecond = 9601.0
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.69991797; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0256s; SamplesPerSecond = 9773.3
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.68696875; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0262s; SamplesPerSecond = 9543.4
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.67331445; EvalErr[0]PerSample = 0.37200000; TotalTime = 0.0273s; SamplesPerSecond = 9148.5
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.65711328; EvalErr[0]PerSample = 0.43200000; TotalTime = 0.0265s; SamplesPerSecond = 9423.6
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.64534375; EvalErr[0]PerSample = 0.44800000; TotalTime = 0.0239s; SamplesPerSecond = 10451.5
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.61021875; EvalErr[0]PerSample = 0.36400000; TotalTime = 0.0229s; SamplesPerSecond = 10912.3
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.54191016; EvalErr[0]PerSample = 0.10800000; TotalTime = 0.0237s; SamplesPerSecond = 10528.1
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.45624414; EvalErr[0]PerSample = 0.10800000; TotalTime = 0.0236s; SamplesPerSecond = 10602.2
04/26/2016 17:03:38:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.37636133; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0223s; SamplesPerSecond = 11188.2
04/26/2016 17:03:38: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 0.68695688; TotalSamplesSeen = 10000; EvalErrPerSample = 0.4555; AvgLearningRatePerSample = 0.02; EpochTime=1.05475
04/26/2016 17:03:38: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn.1'

04/26/2016 17:03:38: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples

04/26/2016 17:03:38: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.28780429; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0251s; SamplesPerSecond = 9952.6
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.28222478; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0259s; SamplesPerSecond = 9663.0
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.23589864; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0247s; SamplesPerSecond = 10111.2
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.21209458; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0244s; SamplesPerSecond = 10242.5
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20285913; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0235s; SamplesPerSecond = 10647.4
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.21300948; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0248s; SamplesPerSecond = 10067.2
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17835594; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0242s; SamplesPerSecond = 10315.7
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18830077; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0240s; SamplesPerSecond = 10407.1
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14198478; EvalErr[0]PerSample = 0.04000000; TotalTime = 0.0241s; SamplesPerSecond = 10352.8
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15895022; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0234s; SamplesPerSecond = 10666.0
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.21062646; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0229s; SamplesPerSecond = 10917.5
04/26/2016 17:03:38:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16081948; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0236s; SamplesPerSecond = 10604.0
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15635713; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0224s; SamplesPerSecond = 11145.8
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13008516; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0235s; SamplesPerSecond = 10619.8
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16625347; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0219s; SamplesPerSecond = 11394.2
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15001793; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0223s; SamplesPerSecond = 11199.2
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.22343917; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0232s; SamplesPerSecond = 10791.7
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18006735; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0235s; SamplesPerSecond = 10643.3
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15361620; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0232s; SamplesPerSecond = 10760.6
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17039588; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0224s; SamplesPerSecond = 11177.7
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15516786; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0231s; SamplesPerSecond = 10812.2
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15969617; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0231s; SamplesPerSecond = 10803.8
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15939439; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0232s; SamplesPerSecond = 10780.5
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15300194; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0227s; SamplesPerSecond = 11034.6
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14902476; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0229s; SamplesPerSecond = 10930.9
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15043256; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0230s; SamplesPerSecond = 10888.5
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15531360; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0223s; SamplesPerSecond = 11209.3
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17990796; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0235s; SamplesPerSecond = 10659.6
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.22925668; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0227s; SamplesPerSecond = 11016.1
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16843626; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0233s; SamplesPerSecond = 10752.2
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18045325; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0236s; SamplesPerSecond = 10612.1
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13337526; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0224s; SamplesPerSecond = 11156.2
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14332977; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0232s; SamplesPerSecond = 10766.6
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18749446; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0234s; SamplesPerSecond = 10666.0
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15505967; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0233s; SamplesPerSecond = 10725.9
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19616616; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0256s; SamplesPerSecond = 9769.1
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17305907; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0255s; SamplesPerSecond = 9800.1
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15197365; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0243s; SamplesPerSecond = 10306.3
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12102416; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0244s; SamplesPerSecond = 10226.6
04/26/2016 17:03:39:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15278496; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0229s; SamplesPerSecond = 10935.2
04/26/2016 17:03:39: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 0.17643784; TotalSamplesSeen = 20000; EvalErrPerSample = 0.0756; AvgLearningRatePerSample = 0.0080000004; EpochTime=0.943969
04/26/2016 17:03:39: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn.2'

04/26/2016 17:03:39: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples

04/26/2016 17:03:39: Starting minibatch loop, DataParallelSGD training (MyRank = 0, NumNodes = 1, NumGradientBits = 1).
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.10623312; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0229s; SamplesPerSecond = 10922.3
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17519442; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0230s; SamplesPerSecond = 10883.8
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14133983; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0233s; SamplesPerSecond = 10751.8
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16278491; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0228s; SamplesPerSecond = 10957.2
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11783558; EvalErr[0]PerSample = 0.04000000; TotalTime = 0.0231s; SamplesPerSecond = 10821.6
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16342188; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0229s; SamplesPerSecond = 10917.0
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16272195; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0234s; SamplesPerSecond = 10701.6
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19401477; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0225s; SamplesPerSecond = 11118.5
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20186661; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0225s; SamplesPerSecond = 11110.6
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13672539; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0232s; SamplesPerSecond = 10753.6
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20069212; EvalErr[0]PerSample = 0.10800000; TotalTime = 0.0227s; SamplesPerSecond = 10996.7
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17729039; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0241s; SamplesPerSecond = 10386.4
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15906107; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0246s; SamplesPerSecond = 10145.3
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16281632; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0245s; SamplesPerSecond = 10206.2
04/26/2016 17:03:39:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19834981; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0244s; SamplesPerSecond = 10239.2
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.10217642; EvalErr[0]PerSample = 0.04000000; TotalTime = 0.0246s; SamplesPerSecond = 10167.6
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17011383; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0247s; SamplesPerSecond = 10105.9
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16599137; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0231s; SamplesPerSecond = 10825.8
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12648996; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0242s; SamplesPerSecond = 10337.8
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.11920298; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0250s; SamplesPerSecond = 10015.6
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12883164; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0245s; SamplesPerSecond = 10215.3
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18222479; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0245s; SamplesPerSecond = 10198.7
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13443351; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0253s; SamplesPerSecond = 9879.5
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19720325; EvalErr[0]PerSample = 0.10800000; TotalTime = 0.0245s; SamplesPerSecond = 10222.0
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15586137; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0252s; SamplesPerSecond = 9906.5
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.11854887; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0241s; SamplesPerSecond = 10382.1
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13705285; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0250s; SamplesPerSecond = 10011.6
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20009941; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0237s; SamplesPerSecond = 10553.9
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19078680; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0231s; SamplesPerSecond = 10801.5
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16505705; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0223s; SamplesPerSecond = 11234.4
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12232722; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0236s; SamplesPerSecond = 10573.1
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16342047; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0226s; SamplesPerSecond = 11062.9
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15875107; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0230s; SamplesPerSecond = 10850.2
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12248772; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0232s; SamplesPerSecond = 10789.3
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13457009; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0239s; SamplesPerSecond = 10445.8
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20976565; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0221s; SamplesPerSecond = 11317.3
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16519102; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0241s; SamplesPerSecond = 10395.0
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14971420; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0257s; SamplesPerSecond = 9720.4
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16456633; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0243s; SamplesPerSecond = 10279.2
04/26/2016 17:03:40:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16971407; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0233s; SamplesPerSecond = 10716.3
04/26/2016 17:03:40: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 0.15787325; TotalSamplesSeen = 30000; EvalErrPerSample = 0.0743; AvgLearningRatePerSample = 0.0080000004; EpochTime=0.951911
04/26/2016 17:03:40: SGD: Saving checkpoint model 'E:\cygwin64\tmp\cntk-test-20160426180336.727918\CNTKTextFormatReader\Examples\Other\Simple2d_MultiGpu@release_cpu/Models/multigpu.dnn'
04/26/2016 17:03:40: CNTKCommandTrainEnd: Multigpu_Demo_Train

04/26/2016 17:03:40: Action "train" complete.


04/26/2016 17:03:40: ##############################################################################
04/26/2016 17:03:40: #                                                                            #
04/26/2016 17:03:40: # Action "test"                                                              #
04/26/2016 17:03:40: #                                                                            #
04/26/2016 17:03:40: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
000000FF0BFDD210: {[W2 Value[2 x 50]] }
000000FF0BFDD530: {[CrossEntropyWithSoftmax Value[1]] }
000000FF0BFDD710: {[EvalErrorPrediction Value[1]] }
000000FF0BFDD7B0: {[W0*features Value[50 x *1]] }
000000FF0BFDDA30: {[W0*features+B0 Value[50 x 1 x *1]] }
000000FF0BFDDAD0: {[LogOfPrior Value[2]] }
000000FF0BFDDCB0: {[W1*H1 Value[50 x 1 x *1]] }
000000FF0BFDDD50: {[H2 Value[50 x 1 x *1]] }
000000FF0BFDDDF0: {[W2*H1 Value[2 x 1 x *1]] }
000000FF0BFDDE90: {[MVNormalizedFeatures Value[2 x *1]] }
000000FF0BFDDF30: {[H1 Value[50 x 1 x *1]] }
000000FF0BFDDFD0: {[W1*H1+B1 Value[50 x 1 x *1]] }
000000FF0BFDE070: {[HLast Value[2 x 1 x *1]] }
000000FF8CD16D00: {[Prior Value[2]] }
000000FF8CD16DA0: {[InvStdOfFeatures Value[2]] }
000000FF8CD16E40: {[labels Value[2 x *1]] }
000000FF8CD17340: {[MeanOfFeatures Value[2]] }
000000FF8CD173E0: {[W1 Value[50 x 50]] }
000000FF8CD175C0: {[W0 Value[50 x 2]] }
000000FF8CD20F20: {[features Value[2 x *1]] }
000000FF8CD20FC0: {[B2 Value[2 x 1]] }
000000FF8CD21380: {[B0 Value[50 x 1]] }
000000FF8CD21420: {[B1 Value[50 x 1]] }

Final Results: Minibatch[1-1]: SamplesSeen = 603    EvalErrorPrediction: ErrorPrediction/Sample = 0.053067993    CrossEntropyWithSoftmax: CrossEntropyWithSoftmax/Sample = 0.11782631    Perplexity = 1.1250487    

04/26/2016 17:03:41: Action "test" complete.

04/26/2016 17:03:41: __COMPLETED__