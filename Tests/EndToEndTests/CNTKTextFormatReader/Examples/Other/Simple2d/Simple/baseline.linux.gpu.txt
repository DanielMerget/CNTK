=== Running /home/alrezni/src/cntk_git/build/release/bin/cntk configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/Simple/../Config/Simple.cntk currentDirectory=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data RunDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu DataDir=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/Simple/../Config OutputDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu DeviceId=0 timestamping=true Simple_Demo_Train=[SGD=[maxEpochs=3]]
-------------------------------------------------------------------
Build info: 

		Built time: Apr 26 2016 17:04:28
		Last modified date: Tue Apr  5 16:01:37 2016
		Build type: release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: acml
		CUDA_PATH: /usr/local/cuda-7.0
		CUB_PATH: /usr/local/cub-1.4.1
		CUDNN_PATH: /usr/local/cudnn-4.0
		Build Branch: alrezni/examples_text
		Build SHA1: 780d0d14f555f568d393793562f374f04af79a73
		Built by alrezni on atleneu04
		Build Path: /home/alrezni/src/cntk_git
-------------------------------------------------------------------
Changed current directory to /home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
04/26/2016 17:09:31: -------------------------------------------------------------------
04/26/2016 17:09:31: Build info: 

04/26/2016 17:09:31: 		Built time: Apr 26 2016 17:04:28
04/26/2016 17:09:31: 		Last modified date: Tue Apr  5 16:01:37 2016
04/26/2016 17:09:31: 		Build type: release
04/26/2016 17:09:31: 		Build target: GPU
04/26/2016 17:09:31: 		With 1bit-SGD: yes
04/26/2016 17:09:31: 		Math lib: acml
04/26/2016 17:09:31: 		CUDA_PATH: /usr/local/cuda-7.0
04/26/2016 17:09:31: 		CUB_PATH: /usr/local/cub-1.4.1
04/26/2016 17:09:31: 		CUDNN_PATH: /usr/local/cudnn-4.0
04/26/2016 17:09:31: 		Build Branch: alrezni/examples_text
04/26/2016 17:09:31: 		Build SHA1: 780d0d14f555f568d393793562f374f04af79a73
04/26/2016 17:09:31: 		Built by alrezni on atleneu04
04/26/2016 17:09:31: 		Build Path: /home/alrezni/src/cntk_git
04/26/2016 17:09:31: -------------------------------------------------------------------

04/26/2016 17:09:31: Running on localhost at 2016/04/26 17:09:31
04/26/2016 17:09:31: Command line: 
/home/alrezni/src/cntk_git/build/release/bin/cntk  configFile=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/Simple/../Config/Simple.cntk  currentDirectory=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data  RunDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu  DataDir=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data  ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/Simple/../Config  OutputDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu  DeviceId=0  timestamping=true  Simple_Demo_Train=[SGD=[maxEpochs=3]]



04/26/2016 17:09:31: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
04/26/2016 17:09:31: RootDir = ".."
ConfigDir = "$RootDir$/Config"
DataDir   = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir  = "$OutputDir$/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "$OutputDir$/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "$DataDir$/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu
DataDir=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/Simple/../Config
OutputDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu
DeviceId=0
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

04/26/2016 17:09:31: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

04/26/2016 17:09:31: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
04/26/2016 17:09:31: RootDir = ".."
ConfigDir = "../Config"
DataDir   = "../Data"
OutputDir = "../Output"
ModelDir  = "/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/Models"
deviceId = -1
command = Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
precision = "float"
traceLevel = 1
modelPath = "/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn"
outputNodeNames = ScaledLogLikelihood
Simple_Demo_Train = [
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Test = [
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]
Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]
currentDirectory=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
RunDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu
DataDir=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/Simple/../Config
OutputDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu
DeviceId=0
timestamping=true
Simple_Demo_Train=[SGD=[maxEpochs=3]]

04/26/2016 17:09:31: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

04/26/2016 17:09:31: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: Simple.cntk:command=Simple_Demo_Train:Simple_Demo_Test:Simple_Demo_Output
configparameters: Simple.cntk:ConfigDir=/home/alrezni/src/cntk_git/Tests/EndToEndTests/CNTKTextFormatReader/Examples/Other/Simple2d/Simple/../Config
configparameters: Simple.cntk:currentDirectory=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
configparameters: Simple.cntk:DataDir=/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data
configparameters: Simple.cntk:deviceId=0
configparameters: Simple.cntk:ModelDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/Models
configparameters: Simple.cntk:modelPath=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn
configparameters: Simple.cntk:OutputDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu
configparameters: Simple.cntk:outputNodeNames=ScaledLogLikelihood
configparameters: Simple.cntk:precision=float
configparameters: Simple.cntk:RootDir=..
configparameters: Simple.cntk:RunDir=/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu
configparameters: Simple.cntk:Simple_Demo_Output=[
    action = "write"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
outputNodeNames = PosteriorProb : labels    
outputPath = "/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/SimpleOutput"     
    format = [
type = "category"                                
labelMappingFile = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleMapping.txt" 
sequenceEpilogue = "\t// %s\n"                   
    ]
]

configparameters: Simple.cntk:Simple_Demo_Test=[
    action = "test"
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTest_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
]

configparameters: Simple.cntk:Simple_Demo_Train=[
    action = "train"
    SimpleNetworkBuilder = [
        layerSizes = 2:50*2:2
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 0 
        minibatchSize = 25  
        learningRatesPerMB = 0.5:0.2*20:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.0
        maxEpochs = 10
    ]
    reader = [
        readerType = "CNTKTextFormatReader"
        file = "/home/alrezni/src/cntk_git/Examples/Other/Simple2d/Data/SimpleDataTrain_cntk_text.txt"
        input = [
            features = [
dim = 2        
                format = "dense"
            ]
            labels = [
dim = 2        
                format = "dense"
            ]
        ]
    ]
] [SGD=[maxEpochs=3]]

configparameters: Simple.cntk:timestamping=true
configparameters: Simple.cntk:traceLevel=1
04/26/2016 17:09:31: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
04/26/2016 17:09:31: Commands: Simple_Demo_Train Simple_Demo_Test Simple_Demo_Output
04/26/2016 17:09:31: Precision = "float"
04/26/2016 17:09:31: CNTKModelPath: /tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn
04/26/2016 17:09:31: CNTKCommandTrainInfo: Simple_Demo_Train : 3
04/26/2016 17:09:31: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

04/26/2016 17:09:31: ##############################################################################
04/26/2016 17:09:31: #                                                                            #
04/26/2016 17:09:31: # Action "train"                                                             #
04/26/2016 17:09:31: #                                                                            #
04/26/2016 17:09:31: ##############################################################################

04/26/2016 17:09:31: CNTKCommandTrainBegin: Simple_Demo_Train
SimpleNetworkBuilder Using GPU 0

04/26/2016 17:09:31: Creating virgin network.
SetUniformRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *]
Validating --> MeanOfFeatures = Mean (features) : [2 x *] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *], [2], [2] -> [2 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *] -> [50 x *]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *] -> [50 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *], [50 x 1] -> [50 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *] -> [50 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *] -> [2 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *], [2 x 1] -> [2 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *], [2 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *] -> [2 x 1 x *]
Validating --> Prior = Mean (labels) : [2 x *] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *], [2] -> [2 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

04/26/2016 17:09:31: Created model with 25 nodes on GPU 0.

04/26/2016 17:09:31: Training criterion node(s):
04/26/2016 17:09:31: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

04/26/2016 17:09:31: Evaluation criterion node(s):

04/26/2016 17:09:31: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *]] [PosteriorProb Value[2 x 1 x *]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *]] [features Gradient[2 x *]] [labels Gradient[2 x *]] }
0x1ad7098: {[features Value[2 x *]] }
0x272ab18: {[B0 Value[50 x 1]] }
0x272cc88: {[W1 Value[50 x 50]] }
0x2753f08: {[MeanOfFeatures Value[2]] }
0x2754418: {[InvStdOfFeatures Value[2]] }
0x2755188: {[W0 Value[50 x 2]] }
0x30a3c98: {[B1 Value[50 x 1]] }
0x30a51c8: {[W2 Value[2 x 50]] }
0x30a5898: {[B2 Value[2 x 1]] }
0x30a6ad8: {[labels Value[2 x *]] }
0x30a7d18: {[Prior Value[2]] }
0x30add68: {[LogOfPrior Value[2]] }
0x30ae7c8: {[EvalErrorPrediction Value[1]] }
0x30afd58: {[MVNormalizedFeatures Value[2 x *]] }
0x30b0078: {[W0*features Value[50 x *]] }
0x30b01d8: {[W0 Gradient[50 x 2]] [W0*features+B0 Value[50 x 1 x *]] }
0x30b0338: {[H1 Value[50 x 1 x *]] [W0*features Gradient[50 x *]] }
0x30b04f8: {[W0*features+B0 Gradient[50 x 1 x *]] [W1*H1 Value[50 x 1 x *]] }
0x30b06b8: {[W1 Gradient[50 x 50]] [W1*H1+B1 Value[50 x 1 x *]] }
0x30b0878: {[H2 Value[50 x 1 x *]] [W1*H1 Gradient[50 x 1 x *]] }
0x30b0a38: {[B0 Gradient[50 x 1]] [H1 Gradient[50 x 1 x *]] [W1*H1+B1 Gradient[50 x 1 x *]] [W2*H1 Value[2 x 1 x *]] }
0x30b0bf8: {[HLast Value[2 x 1 x *]] [W2 Gradient[2 x 50]] }
0x30b0db8: {[CrossEntropyWithSoftmax Value[1]] }
0x30b1b38: {[ScaledLogLikelihood Value[2 x 1 x *]] }
0x30b1cf8: {[CrossEntropyWithSoftmax Gradient[1]] }
0x30b1eb8: {[B1 Gradient[50 x 1]] [H2 Gradient[50 x 1 x *]] [HLast Gradient[2 x 1 x *]] }
0x30b2078: {[W2*H1 Gradient[2 x 1 x *]] }
0x30b2238: {[B2 Gradient[2 x 1]] }


04/26/2016 17:09:31: Precomputing --> 3 PreCompute nodes found.

04/26/2016 17:09:31: 	MeanOfFeatures = Mean()
04/26/2016 17:09:31: 	InvStdOfFeatures = InvStdDev()
04/26/2016 17:09:31: 	Prior = Mean()

04/26/2016 17:09:32: Precomputing --> Completed.


04/26/2016 17:09:32: Starting Epoch 1: learning rate per sample = 0.020000  effective momentum = 0.900000  momentum as time constant = 237.3 samples

04/26/2016 17:09:32: Starting minibatch loop.
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[   1-  10]: SamplesSeen = 250; TrainLossPerSample =  0.70004456; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0062s; SamplesPerSecond = 40361.6
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[  11-  20]: SamplesSeen = 250; TrainLossPerSample =  0.70309900; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0052s; SamplesPerSecond = 47637.2
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[  21-  30]: SamplesSeen = 250; TrainLossPerSample =  0.70606104; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0052s; SamplesPerSecond = 47719.0
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[  31-  40]: SamplesSeen = 250; TrainLossPerSample =  0.69845532; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0052s; SamplesPerSecond = 48178.8
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[  41-  50]: SamplesSeen = 250; TrainLossPerSample =  0.73496533; EvalErr[0]PerSample = 0.57600000; TotalTime = 0.0052s; SamplesPerSecond = 47746.4
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[  51-  60]: SamplesSeen = 250; TrainLossPerSample =  0.72522827; EvalErr[0]PerSample = 0.50800000; TotalTime = 0.0052s; SamplesPerSecond = 47792.0
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[  61-  70]: SamplesSeen = 250; TrainLossPerSample =  0.73287500; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0052s; SamplesPerSecond = 47719.0
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[  71-  80]: SamplesSeen = 250; TrainLossPerSample =  0.70135547; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0052s; SamplesPerSecond = 47947.8
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[  81-  90]: SamplesSeen = 250; TrainLossPerSample =  0.72466504; EvalErr[0]PerSample = 0.46000000; TotalTime = 0.0053s; SamplesPerSecond = 47366.4
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[  91- 100]: SamplesSeen = 250; TrainLossPerSample =  0.72187500; EvalErr[0]PerSample = 0.52000000; TotalTime = 0.0052s; SamplesPerSecond = 47691.7
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 101- 110]: SamplesSeen = 250; TrainLossPerSample =  0.69799023; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0052s; SamplesPerSecond = 47801.1
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 111- 120]: SamplesSeen = 250; TrainLossPerSample =  0.70696387; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0053s; SamplesPerSecond = 46886.7
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 121- 130]: SamplesSeen = 250; TrainLossPerSample =  0.69863965; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0052s; SamplesPerSecond = 47728.1
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 131- 140]: SamplesSeen = 250; TrainLossPerSample =  0.71772461; EvalErr[0]PerSample = 0.54800000; TotalTime = 0.0052s; SamplesPerSecond = 48076.9
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 141- 150]: SamplesSeen = 250; TrainLossPerSample =  0.69526270; EvalErr[0]PerSample = 0.52400000; TotalTime = 0.0052s; SamplesPerSecond = 47737.3
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 151- 160]: SamplesSeen = 250; TrainLossPerSample =  0.71436426; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0053s; SamplesPerSecond = 47573.7
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 161- 170]: SamplesSeen = 250; TrainLossPerSample =  0.70399316; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0052s; SamplesPerSecond = 47801.1
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 171- 180]: SamplesSeen = 250; TrainLossPerSample =  0.71745508; EvalErr[0]PerSample = 0.48800000; TotalTime = 0.0052s; SamplesPerSecond = 47883.5
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 181- 190]: SamplesSeen = 250; TrainLossPerSample =  0.71963184; EvalErr[0]PerSample = 0.49600000; TotalTime = 0.0052s; SamplesPerSecond = 47673.5
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 191- 200]: SamplesSeen = 250; TrainLossPerSample =  0.70689941; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0052s; SamplesPerSecond = 47801.1
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 201- 210]: SamplesSeen = 250; TrainLossPerSample =  0.70425098; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0052s; SamplesPerSecond = 48058.4
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 211- 220]: SamplesSeen = 250; TrainLossPerSample =  0.70622754; EvalErr[0]PerSample = 0.45200000; TotalTime = 0.0052s; SamplesPerSecond = 47782.9
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 221- 230]: SamplesSeen = 250; TrainLossPerSample =  0.69729492; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0052s; SamplesPerSecond = 47856.0
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 231- 240]: SamplesSeen = 250; TrainLossPerSample =  0.75974219; EvalErr[0]PerSample = 0.51200000; TotalTime = 0.0052s; SamplesPerSecond = 48543.7
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 241- 250]: SamplesSeen = 250; TrainLossPerSample =  0.70631250; EvalErr[0]PerSample = 0.43600000; TotalTime = 0.0052s; SamplesPerSecond = 48113.9
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 251- 260]: SamplesSeen = 250; TrainLossPerSample =  0.70705664; EvalErr[0]PerSample = 0.46400000; TotalTime = 0.0052s; SamplesPerSecond = 48216.0
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 261- 270]: SamplesSeen = 250; TrainLossPerSample =  0.72660352; EvalErr[0]PerSample = 0.51600000; TotalTime = 0.0052s; SamplesPerSecond = 48374.6
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 271- 280]: SamplesSeen = 250; TrainLossPerSample =  0.71369727; EvalErr[0]PerSample = 0.55600000; TotalTime = 0.0052s; SamplesPerSecond = 48076.9
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 281- 290]: SamplesSeen = 250; TrainLossPerSample =  0.68916602; EvalErr[0]PerSample = 0.47200000; TotalTime = 0.0052s; SamplesPerSecond = 48123.2
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 291- 300]: SamplesSeen = 250; TrainLossPerSample =  0.69964844; EvalErr[0]PerSample = 0.47600000; TotalTime = 0.0052s; SamplesPerSecond = 47892.7
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 301- 310]: SamplesSeen = 250; TrainLossPerSample =  0.69387891; EvalErr[0]PerSample = 0.46000000; TotalTime = 0.0064s; SamplesPerSecond = 39302.0
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 311- 320]: SamplesSeen = 250; TrainLossPerSample =  0.68885742; EvalErr[0]PerSample = 0.50400000; TotalTime = 0.0052s; SamplesPerSecond = 47782.9
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 321- 330]: SamplesSeen = 250; TrainLossPerSample =  0.69388867; EvalErr[0]PerSample = 0.48000000; TotalTime = 0.0052s; SamplesPerSecond = 47837.7
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 331- 340]: SamplesSeen = 250; TrainLossPerSample =  0.70363867; EvalErr[0]PerSample = 0.50000000; TotalTime = 0.0052s; SamplesPerSecond = 47938.6
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 341- 350]: SamplesSeen = 250; TrainLossPerSample =  0.65449219; EvalErr[0]PerSample = 0.44400000; TotalTime = 0.0053s; SamplesPerSecond = 47555.6
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 351- 360]: SamplesSeen = 250; TrainLossPerSample =  0.64607031; EvalErr[0]PerSample = 0.46000000; TotalTime = 0.0053s; SamplesPerSecond = 47546.6
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 361- 370]: SamplesSeen = 250; TrainLossPerSample =  0.59492969; EvalErr[0]PerSample = 0.12400000; TotalTime = 0.0052s; SamplesPerSecond = 47975.4
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 371- 380]: SamplesSeen = 250; TrainLossPerSample =  0.53965820; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0052s; SamplesPerSecond = 47773.7
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 381- 390]: SamplesSeen = 250; TrainLossPerSample =  0.43681445; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0053s; SamplesPerSecond = 47546.6
04/26/2016 17:09:32:  Epoch[ 1 of 3]-Minibatch[ 391- 400]: SamplesSeen = 250; TrainLossPerSample =  0.37407422; EvalErr[0]PerSample = 0.12000000; TotalTime = 0.0052s; SamplesPerSecond = 47929.4
04/26/2016 17:09:32: Finished Epoch[ 1 of 3]: [Training Set] TrainLossPerSample = 0.68409629; TotalSamplesSeen = 10000; EvalErrPerSample = 0.4578; AvgLearningRatePerSample = 0.02; EpochTime=0.21489
04/26/2016 17:09:32: SGD: Saving checkpoint model '/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn.1'

04/26/2016 17:09:32: Starting Epoch 2: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples

04/26/2016 17:09:32: Starting minibatch loop.
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.27895840; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0052s; SamplesPerSecond = 47883.5
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.24395615; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0052s; SamplesPerSecond = 47984.6
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19587115; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0052s; SamplesPerSecond = 48095.4
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16368213; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0052s; SamplesPerSecond = 48402.7
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19700140; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0052s; SamplesPerSecond = 47828.6
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19580530; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0052s; SamplesPerSecond = 48178.8
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18257983; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0052s; SamplesPerSecond = 48393.3
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17520911; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0053s; SamplesPerSecond = 47582.8
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20164514; EvalErr[0]PerSample = 0.10800000; TotalTime = 0.0053s; SamplesPerSecond = 47267.9
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19787024; EvalErr[0]PerSample = 0.10000000; TotalTime = 0.0052s; SamplesPerSecond = 47947.8
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13437573; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0052s; SamplesPerSecond = 47957.0
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.19004956; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0052s; SamplesPerSecond = 47966.2
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12287280; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0052s; SamplesPerSecond = 48299.8
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16975903; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0052s; SamplesPerSecond = 48365.3
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16102686; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0052s; SamplesPerSecond = 48132.5
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18611646; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0052s; SamplesPerSecond = 48337.2
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18469507; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0052s; SamplesPerSecond = 48459.0
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18472339; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0052s; SamplesPerSecond = 48327.9
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20064648; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0052s; SamplesPerSecond = 48197.4
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13324683; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0052s; SamplesPerSecond = 47947.8
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13878418; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0052s; SamplesPerSecond = 48318.5
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15587354; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0063s; SamplesPerSecond = 39469.5
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.15337378; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0052s; SamplesPerSecond = 48030.7
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14797070; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0052s; SamplesPerSecond = 48113.9
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12512891; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0052s; SamplesPerSecond = 47966.2
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14058545; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0052s; SamplesPerSecond = 47957.0
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12611963; EvalErr[0]PerSample = 0.04400000; TotalTime = 0.0052s; SamplesPerSecond = 48169.6
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18970605; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0052s; SamplesPerSecond = 48030.7
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17965479; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0052s; SamplesPerSecond = 47792.0
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18866455; EvalErr[0]PerSample = 0.09600000; TotalTime = 0.0052s; SamplesPerSecond = 47947.8
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17539941; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0052s; SamplesPerSecond = 48365.3
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14742432; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0052s; SamplesPerSecond = 47874.4
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13789502; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0052s; SamplesPerSecond = 47993.9
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13652100; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0052s; SamplesPerSecond = 48141.7
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13619336; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0052s; SamplesPerSecond = 47846.9
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14909424; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0052s; SamplesPerSecond = 47947.8
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14762256; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0052s; SamplesPerSecond = 48374.6
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13142578; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0052s; SamplesPerSecond = 47911.1
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19570459; EvalErr[0]PerSample = 0.11600000; TotalTime = 0.0052s; SamplesPerSecond = 47947.8
04/26/2016 17:09:32:  Epoch[ 2 of 3]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15718604; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0052s; SamplesPerSecond = 48430.8
04/26/2016 17:09:32: Finished Epoch[ 2 of 3]: [Training Set] TrainLossPerSample = 0.16901047; TotalSamplesSeen = 20000; EvalErrPerSample = 0.0751; AvgLearningRatePerSample = 0.0080000004; EpochTime=0.211543
04/26/2016 17:09:32: SGD: Saving checkpoint model '/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn.2'

04/26/2016 17:09:32: Starting Epoch 3: learning rate per sample = 0.008000  effective momentum = 0.900000  momentum as time constant = 237.3 samples

04/26/2016 17:09:32: Starting minibatch loop.
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[   1-  10, 2.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18133401; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0052s; SamplesPerSecond = 47746.4
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[  11-  20, 5.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13605756; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0052s; SamplesPerSecond = 47920.3
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[  21-  30, 7.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14345651; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0052s; SamplesPerSecond = 48141.7
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[  31-  40, 10.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12512610; EvalErr[0]PerSample = 0.05200000; TotalTime = 0.0052s; SamplesPerSecond = 48402.7
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[  41-  50, 12.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17690991; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0052s; SamplesPerSecond = 47901.9
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[  51-  60, 15.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17504150; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0052s; SamplesPerSecond = 47646.3
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[  61-  70, 17.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14723834; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0052s; SamplesPerSecond = 47874.4
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[  71-  80, 20.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16752893; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0052s; SamplesPerSecond = 48058.4
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[  81-  90, 22.50%]: SamplesSeen = 250; TrainLossPerSample =  0.10317773; EvalErr[0]PerSample = 0.04000000; TotalTime = 0.0052s; SamplesPerSecond = 48049.2
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[  91- 100, 25.00%]: SamplesSeen = 250; TrainLossPerSample =  0.20306372; EvalErr[0]PerSample = 0.11200000; TotalTime = 0.0052s; SamplesPerSecond = 48337.2
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 101- 110, 27.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16637036; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0052s; SamplesPerSecond = 48095.4
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 111- 120, 30.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15126868; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0052s; SamplesPerSecond = 48178.8
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 121- 130, 32.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19167224; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0052s; SamplesPerSecond = 48281.2
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 131- 140, 35.00%]: SamplesSeen = 250; TrainLossPerSample =  0.13687085; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0053s; SamplesPerSecond = 47537.6
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 141- 150, 37.50%]: SamplesSeen = 250; TrainLossPerSample =  0.20709912; EvalErr[0]PerSample = 0.08800000; TotalTime = 0.0052s; SamplesPerSecond = 48086.2
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 151- 160, 40.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12918774; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0052s; SamplesPerSecond = 48253.2
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 161- 170, 42.50%]: SamplesSeen = 250; TrainLossPerSample =  0.17185107; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0051s; SamplesPerSecond = 48732.9
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 171- 180, 45.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16523242; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0052s; SamplesPerSecond = 48515.4
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 181- 190, 47.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14880249; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0051s; SamplesPerSecond = 48723.4
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 191- 200, 50.00%]: SamplesSeen = 250; TrainLossPerSample =  0.12590967; EvalErr[0]PerSample = 0.06800000; TotalTime = 0.0051s; SamplesPerSecond = 48676.0
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 201- 210, 52.50%]: SamplesSeen = 250; TrainLossPerSample =  0.13443018; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0052s; SamplesPerSecond = 48449.6
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 211- 220, 55.00%]: SamplesSeen = 250; TrainLossPerSample =  0.16726147; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0051s; SamplesPerSecond = 48600.3
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 221- 230, 57.50%]: SamplesSeen = 250; TrainLossPerSample =  0.22407422; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0052s; SamplesPerSecond = 48178.8
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 231- 240, 60.00%]: SamplesSeen = 250; TrainLossPerSample =  0.18191553; EvalErr[0]PerSample = 0.10400000; TotalTime = 0.0052s; SamplesPerSecond = 48374.6
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 241- 250, 62.50%]: SamplesSeen = 250; TrainLossPerSample =  0.19983057; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0052s; SamplesPerSecond = 48430.8
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 251- 260, 65.00%]: SamplesSeen = 250; TrainLossPerSample =  0.22728223; EvalErr[0]PerSample = 0.12400000; TotalTime = 0.0052s; SamplesPerSecond = 48058.4
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 261- 270, 67.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12720459; EvalErr[0]PerSample = 0.06000000; TotalTime = 0.0052s; SamplesPerSecond = 48309.2
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 271- 280, 70.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15842871; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0052s; SamplesPerSecond = 48271.9
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 281- 290, 72.50%]: SamplesSeen = 250; TrainLossPerSample =  0.11558691; EvalErr[0]PerSample = 0.05600000; TotalTime = 0.0052s; SamplesPerSecond = 48067.7
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 291- 300, 75.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14163428; EvalErr[0]PerSample = 0.07200000; TotalTime = 0.0052s; SamplesPerSecond = 48337.2
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 301- 310, 77.50%]: SamplesSeen = 250; TrainLossPerSample =  0.18560596; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0051s; SamplesPerSecond = 48723.4
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 311- 320, 80.00%]: SamplesSeen = 250; TrainLossPerSample =  0.15099561; EvalErr[0]PerSample = 0.08000000; TotalTime = 0.0052s; SamplesPerSecond = 48524.8
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 321- 330, 82.50%]: SamplesSeen = 250; TrainLossPerSample =  0.12822461; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0052s; SamplesPerSecond = 48449.6
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 331- 340, 85.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17662500; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0051s; SamplesPerSecond = 49019.6
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 341- 350, 87.50%]: SamplesSeen = 250; TrainLossPerSample =  0.14950781; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0052s; SamplesPerSecond = 48402.7
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 351- 360, 90.00%]: SamplesSeen = 250; TrainLossPerSample =  0.11450977; EvalErr[0]PerSample = 0.04800000; TotalTime = 0.0051s; SamplesPerSecond = 48676.0
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 361- 370, 92.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16386768; EvalErr[0]PerSample = 0.07600000; TotalTime = 0.0051s; SamplesPerSecond = 48562.5
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 371- 380, 95.00%]: SamplesSeen = 250; TrainLossPerSample =  0.14811523; EvalErr[0]PerSample = 0.06400000; TotalTime = 0.0052s; SamplesPerSecond = 48141.7
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 381- 390, 97.50%]: SamplesSeen = 250; TrainLossPerSample =  0.16021143; EvalErr[0]PerSample = 0.08400000; TotalTime = 0.0052s; SamplesPerSecond = 48225.3
04/26/2016 17:09:32:  Epoch[ 3 of 3]-Minibatch[ 391- 400, 100.00%]: SamplesSeen = 250; TrainLossPerSample =  0.17989551; EvalErr[0]PerSample = 0.09200000; TotalTime = 0.0052s; SamplesPerSecond = 48384.0
04/26/2016 17:09:32: Finished Epoch[ 3 of 3]: [Training Set] TrainLossPerSample = 0.15971016; TotalSamplesSeen = 30000; EvalErrPerSample = 0.0774; AvgLearningRatePerSample = 0.0080000004; EpochTime=0.210924
04/26/2016 17:09:32: SGD: Saving checkpoint model '/tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/Models/simple.dnn'
04/26/2016 17:09:32: CNTKCommandTrainEnd: Simple_Demo_Train

04/26/2016 17:09:32: Action "train" complete.


04/26/2016 17:09:32: ##############################################################################
04/26/2016 17:09:32: #                                                                            #
04/26/2016 17:09:32: # Action "test"                                                              #
04/26/2016 17:09:32: #                                                                            #
04/26/2016 17:09:32: ##############################################################################


Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *1]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *1]
Validating --> MeanOfFeatures = Mean (features) : [2 x *1] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *1] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *1], [2], [2] -> [2 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *1] -> [50 x *1]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *1], [50 x 1] -> [50 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *1] -> [50 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *1] -> [2 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *1], [2 x 1] -> [2 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *1], [2 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *1] -> [2 x 1 x *1]
Validating --> Prior = Mean (labels) : [2 x *1] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *1], [2] -> [2 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [EvalErrorPrediction Gradient[1]] [H1 Gradient[50 x 1 x *1]] [H2 Gradient[50 x 1 x *1]] [HLast Gradient[2 x 1 x *1]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *1]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *1]] [PosteriorProb Value[2 x 1 x *1]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *1]] [ScaledLogLikelihood Value[2 x 1 x *1]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *1]] [W0*features+B0 Gradient[50 x 1 x *1]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *1]] [W1*H1+B1 Gradient[50 x 1 x *1]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *1]] [features Gradient[2 x *1]] [labels Gradient[2 x *1]] }
0x1ad91d8: {[B0 Value[50 x 1]] }
0x1ade3e8: {[Prior Value[2]] }
0x272ab18: {[B1 Value[50 x 1]] }
0x272c538: {[W0 Value[50 x 2]] }
0x2753878: {[LogOfPrior Value[2]] }
0x27552c8: {[MVNormalizedFeatures Value[2 x *1]] }
0x2755678: {[W0*features Value[50 x *1]] }
0x30a78a8: {[MeanOfFeatures Value[2]] }
0x30a8d18: {[W2 Value[2 x 50]] }
0x30a9c68: {[features Value[2 x *1]] }
0x30a9d08: {[InvStdOfFeatures Value[2]] }
0x30ae8e8: {[B2 Value[2 x 1]] }
0x30afbf8: {[W0*features+B0 Value[50 x 1 x *1]] }
0x30afdb8: {[H1 Value[50 x 1 x *1]] }
0x30aff78: {[W1*H1 Value[50 x 1 x *1]] }
0x30b0138: {[W1*H1+B1 Value[50 x 1 x *1]] }
0x30b02f8: {[H2 Value[50 x 1 x *1]] }
0x30b04b8: {[W2*H1 Value[2 x 1 x *1]] }
0x30b0678: {[HLast Value[2 x 1 x *1]] }
0x30b0838: {[CrossEntropyWithSoftmax Value[1]] }
0x30b0da8: {[EvalErrorPrediction Value[1]] }
0x30b35a8: {[labels Value[2 x *1]] }
0x6e17c38: {[W1 Value[50 x 50]] }

Final Results: Minibatch[1-1]: SamplesSeen = 603    EvalErrorPrediction: ErrorPrediction/Sample = 0.059701493    CrossEntropyWithSoftmax: CrossEntropyWithSoftmax/Sample = 0.13093129    Perplexity = 1.1398895    

04/26/2016 17:09:32: Action "test" complete.


04/26/2016 17:09:32: ##############################################################################
04/26/2016 17:09:32: #                                                                            #
04/26/2016 17:09:32: # Action "write"                                                             #
04/26/2016 17:09:32: #                                                                            #
04/26/2016 17:09:32: ##############################################################################


Post-processing network...

8 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()
	labels = InputValue()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [2 x *2]
Validating --> W2 = LearnableParameter() :  -> [2 x 50]
Validating --> W1 = LearnableParameter() :  -> [50 x 50]
Validating --> W0 = LearnableParameter() :  -> [50 x 2]
Validating --> features = InputValue() :  -> [2 x *2]
Validating --> MeanOfFeatures = Mean (features) : [2 x *2] -> [2]
Validating --> InvStdOfFeatures = InvStdDev (features) : [2 x *2] -> [2]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [2 x *2], [2], [2] -> [2 x *2]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [50 x 2], [2 x *2] -> [50 x *2]
Validating --> B0 = LearnableParameter() :  -> [50 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [50 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H1 = Sigmoid (W0*features+B0) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W1*H1 = Times (W1, H1) : [50 x 50], [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> B1 = LearnableParameter() :  -> [50 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [50 x 1 x *2], [50 x 1] -> [50 x 1 x *2]
Validating --> H2 = Sigmoid (W1*H1+B1) : [50 x 1 x *2] -> [50 x 1 x *2]
Validating --> W2*H1 = Times (W2, H2) : [2 x 50], [50 x 1 x *2] -> [2 x 1 x *2]
Validating --> B2 = LearnableParameter() :  -> [2 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [2 x 1 x *2], [2 x 1] -> [2 x 1 x *2]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [2 x *2], [2 x 1 x *2] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [2 x 1 x *2] -> [2 x 1 x *2]
Validating --> Prior = Mean (labels) : [2 x *2] -> [2]
Validating --> LogOfPrior = Log (Prior) : [2] -> [2]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [2 x 1 x *2], [2] -> [2 x 1 x *2]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

(nil): {[B0 Gradient[50 x 1]] [B1 Gradient[50 x 1]] [B2 Gradient[2 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[50 x 1 x *2]] [H2 Gradient[50 x 1 x *2]] [HLast Gradient[2 x 1 x *2]] [InvStdOfFeatures Gradient[2]] [LogOfPrior Gradient[2]] [MVNormalizedFeatures Gradient[2 x *2]] [MeanOfFeatures Gradient[2]] [PosteriorProb Gradient[2 x 1 x *2]] [Prior Gradient[2]] [ScaledLogLikelihood Gradient[2 x 1 x *2]] [ScaledLogLikelihood Value[2 x 1 x *2]] [W0 Gradient[50 x 2]] [W0*features Gradient[50 x *2]] [W0*features+B0 Gradient[50 x 1 x *2]] [W1 Gradient[50 x 50]] [W1*H1 Gradient[50 x 1 x *2]] [W1*H1+B1 Gradient[50 x 1 x *2]] [W2 Gradient[2 x 50]] [W2*H1 Gradient[2 x 1 x *2]] [features Gradient[2 x *2]] [labels Gradient[2 x *2]] }
0x1ad91d8: {[B0 Value[50 x 1]] }
0x1add028: {[B1 Value[50 x 1]] }
0x1add8c8: {[B2 Value[2 x 1]] }
0x1addeb8: {[InvStdOfFeatures Value[2]] }
0x272c878: {[W0 Value[50 x 2]] }
0x2754dc8: {[labels Value[2 x *2]] }
0x27557b8: {[MeanOfFeatures Value[2]] }
0x30abff8: {[LogOfPrior Value[2]] }
0x30ae3f8: {[W1 Value[50 x 50]] }
0x30b2e48: {[features Value[2 x *2]] }
0x30b3d38: {[Prior Value[2]] }
0x6df8388: {[W2 Value[2 x 50]] }
0x6df8db8: {[MVNormalizedFeatures Value[2 x *2]] }
0x6df9168: {[W0*features Value[50 x *2]] }
0x6df9328: {[W0*features+B0 Value[50 x 1 x *2]] }
0x6df94e8: {[H1 Value[50 x 1 x *2]] }
0x6df96a8: {[W1*H1 Value[50 x 1 x *2]] }
0x6df9868: {[W1*H1+B1 Value[50 x 1 x *2]] }
0x6df9a28: {[H2 Value[50 x 1 x *2]] }
0x6df9be8: {[W2*H1 Value[2 x 1 x *2]] }
0x6df9da8: {[HLast Value[2 x 1 x *2]] }
0x6df9f98: {[PosteriorProb Value[2 x 1 x *2]] }

Minibatch[0]: ActualMBSize = 603
Written to /tmp/cntk-test-20160426170928.688721/CNTKTextFormatReader/Examples/Other/Simple2d_Simple@release_gpu/SimpleOutput*
Total Samples Evaluated = 603

04/26/2016 17:09:32: Action "write" complete.

04/26/2016 17:09:32: __COMPLETED__